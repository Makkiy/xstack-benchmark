clang -Xclang -disable-O0-optnone -S -emit-llvm -g deconvolution-2d+-1.c
deconvolution-2d+-1.c:56:7: warning: using complex absolute value function 'cabs' when argument is of floating point type [-Wabsolute-value]
                if (cabs(creal(h[i])) < 1e-10)
                    ^
deconvolution-2d+-1.c:56:7: note: use function 'fabs' instead
                if (cabs(creal(h[i])) < 1e-10)
                    ^~~~
                    fabs
1 warning generated.
opt -loop-simplify deconvolution-2d+-1.ll -S -o deconvolution-2d+-1.ll
opt -mem2reg deconvolution-2d+-1.ll -S -o deconvolution-2d+-1_mem2reg.ll
llvm-cbe deconvolution-2d+-1_mem2reg.ll
SUSAN: print loop:Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%complex_mul_imag_nan,%complex_mul_libcall,%complex_mul_cont,%complex_mul_imag_nan16,%complex_mul_libcall18,%complex_mul_cont20,%for.inc<latch>

SUSAN: exit block:
for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !81

SUSAN: false branch only!!!
entry:
  %t = alloca { double, double }, align 8
  %coerce = alloca { double, double }, align 8
  call void @llvm.dbg.value(metadata { double, double }* %buf, metadata !26, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata { double, double }* %out, metadata !28, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !29, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %step, metadata !30, metadata !DIExpression()), !dbg !27
  %cmp = icmp slt i32 %step, %n, !dbg !31
  br i1 %cmp, label %if.then, label %if.end, !dbg !33

WARNING: this target does not support the llvm.stacksave intrinsic.
SUSAN: print loop:Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.inc<latch>

SUSAN: exit block:
for.end:                                          ; preds = %for.cond
  call void @_fft({ double, double }* %buf, { double, double }* %vla, i32 %n, i32 1), !dbg !51
  ret void, !dbg !52

SUSAN: print loop:Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.inc<latch>

SUSAN: exit block:
for.end:                                          ; preds = %for.cond
  store i32 %n.1, i32* %ns, align 4, !dbg !60
  ret { double, double }* %2, !dbg !61

SUSAN: print loop:Parallel Loop at depth 1 containing: %while.cond<header><exiting>,%while.body<latch>

SUSAN: exit block:
while.end:                                        ; preds = %while.cond
  br label %if.end

SUSAN: print loop:Loop at depth 1 containing: %for.cond21<header><exiting>,%for.body24,%for.inc31<latch>

SUSAN: exit block:
for.end32:                                        ; preds = %for.cond21
  %17 = bitcast { double, double }* %call to i8*, !dbg !115
  call void @free(i8* %17) #3, !dbg !116
  %18 = bitcast { double, double }* %call1 to i8*, !dbg !117
  call void @free(i8* %18) #3, !dbg !118
  ret void, !dbg !119

SUSAN: print loop:Loop at depth 1 containing: %for.cond8<header><exiting>,%for.body10,%if.then,%if.end,%for.inc17<latch>

SUSAN: exit block:
for.end19:                                        ; preds = %for.cond8
  call void @llvm.dbg.value(metadata i32 0, metadata !93, metadata !DIExpression()), !dbg !95
  br label %for.cond21, !dbg !96

SUSAN: print loop:Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.inc<latch>

SUSAN: exit block:
for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %ns, align 4, !dbg !70
  call void @fft({ double, double }* %vla, i32 %7), !dbg !71
  call void @llvm.dbg.value(metadata i32 0, metadata !72, metadata !DIExpression()), !dbg !74
  br label %for.cond8, !dbg !75

SUSAN: print loop:Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond2,%for.end,%for.inc11<latch>,%for.body5,%for.inc
    Loop at depth 2 containing: %for.cond2<header><exiting>,%for.body5,%for.inc<latch>

SUSAN: exit block:
for.end13:                                        ; preds = %for.cond
  ret double* %0, !dbg !62

SUSAN: print loop:Loop at depth 2 containing: %for.cond2<header><exiting>,%for.body5,%for.inc<latch>

SUSAN: exit block:
for.end:                                          ; preds = %for.cond2
  br label %for.inc11, !dbg !57

SUSAN: print loop:Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end,%for.inc8<latch>,%for.body3,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

SUSAN: exit block:
for.end10:                                        ; preds = %for.cond
  ret void, !dbg !60

SUSAN: print loop:Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.inc<latch>

SUSAN: exit block:
for.end:                                          ; preds = %for.cond1
  br label %for.inc8, !dbg !55

SUSAN: print loop:Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond3,%for.end22,%for.inc23<latch>,%for.body6,%for.cond7,%for.end,%for.inc20,%for.body10,%for.inc
    Loop at depth 2 containing: %for.cond3<header><exiting>,%for.body6,%for.cond7,%for.end,%for.inc20<latch>,%for.body10,%for.inc
        Loop at depth 3 containing: %for.cond7<header><exiting>,%for.body10,%for.inc<latch>

SUSAN: exit block:
for.end25:                                        ; preds = %for.cond
  ret double* %0, !dbg !80

SUSAN: print loop:Loop at depth 2 containing: %for.cond3<header><exiting>,%for.body6,%for.cond7,%for.end,%for.inc20<latch>,%for.body10,%for.inc
    Loop at depth 3 containing: %for.cond7<header><exiting>,%for.body10,%for.inc<latch>

SUSAN: exit block:
for.end22:                                        ; preds = %for.cond3
  br label %for.inc23, !dbg !75

SUSAN: print loop:Loop at depth 3 containing: %for.cond7<header><exiting>,%for.body10,%for.inc<latch>

SUSAN: exit block:
for.end:                                          ; preds = %for.cond7
  br label %for.inc20, !dbg !71

SUSAN: print loop:Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end17,%for.inc18<latch>,%for.body3,%for.cond4,%for.end,%for.inc15,%for.body6,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.cond4,%for.end,%for.inc15<latch>,%for.body6,%for.inc
        Loop at depth 3 containing: %for.cond4<header><exiting>,%for.body6,%for.inc<latch>

SUSAN: exit block:
for.end20:                                        ; preds = %for.cond
  ret void, !dbg !75

SUSAN: print loop:Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.cond4,%for.end,%for.inc15<latch>,%for.body6,%for.inc
    Loop at depth 3 containing: %for.cond4<header><exiting>,%for.body6,%for.inc<latch>

SUSAN: exit block:
for.end17:                                        ; preds = %for.cond1
  br label %for.inc18, !dbg !70

SUSAN: print loop:Loop at depth 3 containing: %for.cond4<header><exiting>,%for.body6,%for.inc<latch>

SUSAN: exit block:
for.end:                                          ; preds = %for.cond4
  br label %for.inc15, !dbg !66

SUSAN: print loop:Loop at depth 1 containing: %for.cond45<header><exiting>,%for.body49,%for.cond51,%for.end75,%if.then78,%if.end80,%for.inc81<latch>,%for.body55,%for.cond57,%for.end71,%for.inc73,%for.body61,%for.inc69
    Loop at depth 2 containing: %for.cond51<header><exiting>,%for.body55,%for.cond57,%for.end71,%for.inc73<latch>,%for.body61,%for.inc69
        Loop at depth 3 containing: %for.cond57<header><exiting>,%for.body61,%for.inc69<latch>

SUSAN: exit block:
for.end83:                                        ; preds = %for.cond45
  ret i32 0, !dbg !199

SUSAN: print loop:Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond9,%for.end27,%if.then,%if.end,%for.inc31<latch>,%for.body13,%for.cond14,%for.end,%for.inc25,%for.body18,%for.inc
    Loop at depth 2 containing: %for.cond9<header><exiting>,%for.body13,%for.cond14,%for.end,%for.inc25<latch>,%for.body18,%for.inc
        Loop at depth 3 containing: %for.cond14<header><exiting>,%for.body18,%for.inc<latch>

SUSAN: exit block:
for.end33:                                        ; preds = %for.cond
  %sub34 = sub nsw i32 4, 2, !dbg !126
  %add35 = add nsw i32 %sub34, 1, !dbg !127
  %18 = zext i32 %add35 to i64, !dbg !128
  %sub36 = sub nsw i32 4, 3, !dbg !129
  %add37 = add nsw i32 %sub36, 1, !dbg !130
  %19 = zext i32 %add37 to i64, !dbg !128
  %sub38 = sub nsw i32 6, 4, !dbg !131
  %add39 = add nsw i32 %sub38, 1, !dbg !132
  %20 = zext i32 %add39 to i64, !dbg !128
  %21 = mul nuw i64 %18, %19, !dbg !128
  %22 = mul nuw i64 %21, %20, !dbg !128
  %vla40 = alloca double, i64 %22, align 16, !dbg !128
  call void @llvm.dbg.value(metadata i64 %18, metadata !133, metadata !DIExpression()), !dbg !34
  call void @llvm.dbg.value(metadata i64 %19, metadata !134, metadata !DIExpression()), !dbg !34
  call void @llvm.dbg.value(metadata i64 %20, metadata !135, metadata !DIExpression()), !dbg !34
  call void @llvm.dbg.declare(metadata double* %vla40, metadata !136, metadata !DIExpression()), !dbg !142
  %arraydecay41 = getelementptr inbounds [4 x [4 x [6 x double]]], [4 x [4 x [6 x double]]]* %g, i64 0, i64 0, !dbg !143
  %23 = bitcast [4 x [6 x double]]* %arraydecay41 to i8*, !dbg !143
  %arraydecay42 = getelementptr inbounds [2 x [3 x [4 x double]]], [2 x [3 x [4 x double]]]* %h, i64 0, i64 0, !dbg !144
  %24 = bitcast [3 x [4 x double]]* %arraydecay42 to i8*, !dbg !144
  %25 = bitcast double* %vla40 to i8*, !dbg !145
  call void @deconv3(i8* %23, i32 4, i32 4, i32 6, i8* %24, i32 2, i32 3, i32 4, i8* %25), !dbg !146
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0)), !dbg !147
  call void @llvm.dbg.value(metadata i32 0, metadata !148, metadata !DIExpression()), !dbg !150
  br label %for.cond45, !dbg !151

SUSAN: print loop:Loop at depth 2 containing: %for.cond51<header><exiting>,%for.body55,%for.cond57,%for.end71,%for.inc73<latch>,%for.body61,%for.inc69
    Loop at depth 3 containing: %for.cond57<header><exiting>,%for.body61,%for.inc69<latch>

SUSAN: exit block:
for.end75:                                        ; preds = %for.cond51
  %sub76 = sub nsw i32 4, 2, !dbg !189
  %cmp77 = icmp slt i32 %i44.0, %sub76, !dbg !191
  br i1 %cmp77, label %if.then78, label %if.end80, !dbg !192

SUSAN: print loop:Loop at depth 2 containing: %for.cond9<header><exiting>,%for.body13,%for.cond14,%for.end,%for.inc25<latch>,%for.body18,%for.inc
    Loop at depth 3 containing: %for.cond14<header><exiting>,%for.body18,%for.inc<latch>

SUSAN: exit block:
for.end27:                                        ; preds = %for.cond9
  %sub28 = sub nsw i32 4, 3, !dbg !116
  %cmp29 = icmp slt i32 %i.0, %sub28, !dbg !118
  br i1 %cmp29, label %if.then, label %if.end, !dbg !119

SUSAN: print loop:Loop at depth 3 containing: %for.cond57<header><exiting>,%for.body61,%for.inc69<latch>

SUSAN: exit block:
for.end71:                                        ; preds = %for.cond57
  %call72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !183
  br label %for.inc73, !dbg !184

SUSAN: print loop:Loop at depth 3 containing: %for.cond14<header><exiting>,%for.body18,%for.inc<latch>

SUSAN: exit block:
for.end:                                          ; preds = %for.cond14
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !110
  br label %for.inc25, !dbg !111

clang -g -O3 deconvolution-2d+-1_mem2reg.cbe.c -lm -o deconvolution-2d+-1_mem2reg.cbe.exe
deconvolution-2d+-1_mem2reg.cbe.c:119:20: warning: incompatible redeclaration of library function 'cexp' [-Wincompatible-library-redeclaration]
struct l_unnamed_1 cexp(double, double) __ATTRIBUTELIST__((nothrow));
                   ^
deconvolution-2d+-1_mem2reg.cbe.c:119:20: note: 'cexp' is a builtin with type '_Complex double (_Complex double)'
deconvolution-2d+-1_mem2reg.cbe.c:124:10: warning: incompatible redeclaration of library function 'calloc' [-Wincompatible-library-redeclaration]
uint8_t* calloc(uint64_t, uint64_t) __ATTRIBUTELIST__((nothrow));
         ^
deconvolution-2d+-1_mem2reg.cbe.c:124:10: note: 'calloc' is a builtin with type 'void *(unsigned long, unsigned long)'
deconvolution-2d+-1_mem2reg.cbe.c:126:8: warning: incompatible redeclaration of library function 'cabs' [-Wincompatible-library-redeclaration]
double cabs(double, double) __ATTRIBUTELIST__((nothrow));
       ^
deconvolution-2d+-1_mem2reg.cbe.c:126:8: note: 'cabs' is a builtin with type 'double (_Complex double)'
deconvolution-2d+-1_mem2reg.cbe.c:136:10: warning: incompatible redeclaration of library function 'printf' [-Wincompatible-library-redeclaration]
uint32_t printf(uint8_t*, ...);
         ^
deconvolution-2d+-1_mem2reg.cbe.c:136:10: note: 'printf' is a builtin with type 'int (const char *, ...)'
deconvolution-2d+-1_mem2reg.cbe.c:137:10: warning: incompatible redeclaration of library function 'memcpy' [-Wincompatible-library-redeclaration]
uint8_t* memcpy(uint8_t*, uint8_t*, uint64_t);
         ^
deconvolution-2d+-1_mem2reg.cbe.c:137:10: note: 'memcpy' is a builtin with type 'void *(void *, const void *, unsigned long)'
make: *** [../Makefile.generic:24: deconvolution-2d+-1_mem2reg.cbe.exe] Interrupt
