; ModuleID = 'polybench.bc'
source_filename = "polybench.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ident_t = type { i32, i32, i32, i32, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@.str = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@0 = private unnamed_addr constant %struct.ident_t { i32 0, i32 514, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0) }, align 8
@1 = private unnamed_addr constant [42 x i8] c";polybench.c;polybench_flush_cache;93;1;;\00", align 1
@2 = private unnamed_addr constant [43 x i8] c";polybench.c;polybench_flush_cache;93;25;;\00", align 1
@3 = private unnamed_addr constant %struct.ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0) }, align 8
@.str.1 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"polybench.c\00", align 1
@__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
@polybench_t_start = common dso_local local_unnamed_addr global double 0.000000e+00, align 8, !dbg !0
@polybench_t_end = common dso_local local_unnamed_addr global double 0.000000e+00, align 8, !dbg !20
@.str.3 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
@polybench_c_start = common dso_local local_unnamed_addr global i64 0, align 8, !dbg !22
@polybench_c_end = common dso_local local_unnamed_addr global i64 0, align 8, !dbg !25
@polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4, !dbg !27
@polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8, !dbg !29
@stderr = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.4 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1

; Function Attrs: nounwind uwtable
define dso_local void @polybench_flush_cache() local_unnamed_addr #0 !dbg !35 {
entry:
  %cs = alloca i32, align 4
  %flush = alloca double*, align 8
  %tmp = alloca double, align 8
  %.kmpc_loc.addr = alloca %struct.ident_t, align 8
  %0 = bitcast %struct.ident_t* %.kmpc_loc.addr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %0, i8* nonnull align 8 dereferenceable(24) bitcast (%struct.ident_t* @3 to i8*), i64 16, i1 false)
  %1 = bitcast i32* %cs to i8*, !dbg !43
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #10, !dbg !43
  call void @llvm.dbg.value(metadata i32 4194560, metadata !39, metadata !DIExpression()), !dbg !44
  store i32 4194560, i32* %cs, align 4, !dbg !45, !tbaa !46
  %2 = bitcast double** %flush to i8*, !dbg !50
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #10, !dbg !50
  call void @llvm.dbg.value(metadata i32 4194560, metadata !39, metadata !DIExpression()), !dbg !44
  %call = tail call noalias dereferenceable_or_null(33556480) i8* @calloc(i64 4194560, i64 8) #10, !dbg !51
  call void @llvm.dbg.value(metadata i8* %call, metadata !40, metadata !DIExpression()), !dbg !44
  %3 = bitcast double** %flush to i8**, !dbg !52
  store i8* %call, i8** %3, align 8, !dbg !52, !tbaa !53
  %4 = bitcast double* %tmp to i8*, !dbg !55
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #10, !dbg !55
  call void @llvm.dbg.value(metadata double 0.000000e+00, metadata !42, metadata !DIExpression()), !dbg !44
  store double 0.000000e+00, double* %tmp, align 8, !dbg !56, !tbaa !57
  %5 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr, i64 0, i32 4, !dbg !59
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @1, i64 0, i64 0), i8** %5, align 8, !dbg !59, !tbaa !60
  call void @llvm.dbg.value(metadata i32* %cs, metadata !39, metadata !DIExpression(DW_OP_deref)), !dbg !44
  call void @llvm.dbg.value(metadata double** %flush, metadata !40, metadata !DIExpression(DW_OP_deref)), !dbg !44
  call void @llvm.dbg.value(metadata double* %tmp, metadata !42, metadata !DIExpression(DW_OP_deref)), !dbg !44
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull %.kmpc_loc.addr, i32 3, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, double*, double**)* @.omp_outlined. to void (i32*, i32*, ...)*), i32* nonnull %cs, double* nonnull %tmp, double** nonnull %flush) #10, !dbg !59
  %6 = load double, double* %tmp, align 8, !dbg !62, !tbaa !57
  call void @llvm.dbg.value(metadata double %6, metadata !42, metadata !DIExpression()), !dbg !44
  %cmp = fcmp ugt double %6, 1.000000e+01, !dbg !62
  br i1 %cmp, label %if.else, label %if.end, !dbg !65

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__PRETTY_FUNCTION__.polybench_flush_cache, i64 0, i64 0)) #11, !dbg !62
  unreachable, !dbg !62

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %3, align 8, !dbg !66, !tbaa !53
  call void @llvm.dbg.value(metadata double* undef, metadata !40, metadata !DIExpression()), !dbg !44
  call void @free(i8* %7) #10, !dbg !67
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #10, !dbg !68
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #10, !dbg !68
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #10, !dbg !68
  ret void, !dbg !68
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @calloc(i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local void @__kmpc_for_static_init_4(%struct.ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32) local_unnamed_addr

declare dso_local void @__kmpc_for_static_fini(%struct.ident_t*, i32) local_unnamed_addr

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp_outlined.(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %cs, double* nocapture dereferenceable(8) %tmp, double** nocapture readonly dereferenceable(8) %flush) #3 !dbg !69 {
entry:
  %.omp.lb.i = alloca i32, align 4
  %.omp.ub.i = alloca i32, align 4
  %.omp.stride.i = alloca i32, align 4
  %.omp.is_last.i = alloca i32, align 4
  %.kmpc_loc.addr.i = alloca %struct.ident_t, align 8
  call void @llvm.dbg.value(metadata i32* %.global_tid., metadata !80, metadata !DIExpression()), !dbg !85
  call void @llvm.dbg.value(metadata i32* %.bound_tid., metadata !81, metadata !DIExpression()), !dbg !85
  call void @llvm.dbg.value(metadata i32* %cs, metadata !82, metadata !DIExpression()), !dbg !85
  call void @llvm.dbg.value(metadata double* %tmp, metadata !83, metadata !DIExpression()), !dbg !85
  call void @llvm.dbg.value(metadata double** %flush, metadata !84, metadata !DIExpression()), !dbg !85
  %0 = bitcast %struct.ident_t* %.kmpc_loc.addr.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %0, i8* nonnull align 8 dereferenceable(24) bitcast (%struct.ident_t* @0 to i8*), i64 24, i1 false) #10, !noalias !86
  call void @llvm.dbg.value(metadata i32* %.global_tid., metadata !89, metadata !DIExpression()) #10, !dbg !103
  call void @llvm.dbg.value(metadata i32* undef, metadata !92, metadata !DIExpression()) #10, !dbg !103
  call void @llvm.dbg.value(metadata i32* %cs, metadata !93, metadata !DIExpression()) #10, !dbg !103
  call void @llvm.dbg.value(metadata double* %tmp, metadata !94, metadata !DIExpression()) #10, !dbg !103
  call void @llvm.dbg.value(metadata double** %flush, metadata !95, metadata !DIExpression()) #10, !dbg !103
  %1 = load i32, i32* %cs, align 4, !dbg !105, !tbaa !46, !noalias !86
  call void @llvm.dbg.value(metadata i32 %1, metadata !97, metadata !DIExpression()) #10, !dbg !103
  %sub3.i = add nsw i32 %1, -1, !dbg !106
  call void @llvm.dbg.value(metadata i32 %sub3.i, metadata !97, metadata !DIExpression()) #10, !dbg !103
  call void @llvm.dbg.value(metadata i32 0, metadata !98, metadata !DIExpression()) #10, !dbg !103
  %cmp.i = icmp sgt i32 %1, 0, !dbg !106
  br i1 %cmp.i, label %omp.precond.then.i, label %.omp_outlined._debug__.exit, !dbg !106

omp.precond.then.i:                               ; preds = %entry
  %2 = bitcast i32* %.omp.lb.i to i8*, !dbg !106
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #10, !dbg !106, !noalias !86
  call void @llvm.dbg.value(metadata i32 0, metadata !99, metadata !DIExpression()) #10, !dbg !103
  store i32 0, i32* %.omp.lb.i, align 4, !dbg !107, !tbaa !46, !noalias !86
  %3 = bitcast i32* %.omp.ub.i to i8*, !dbg !106
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #10, !dbg !106, !noalias !86
  call void @llvm.dbg.value(metadata i32 %sub3.i, metadata !100, metadata !DIExpression()) #10, !dbg !103
  store i32 %sub3.i, i32* %.omp.ub.i, align 4, !dbg !107, !tbaa !46, !noalias !86
  %4 = bitcast i32* %.omp.stride.i to i8*, !dbg !106
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #10, !dbg !106, !noalias !86
  call void @llvm.dbg.value(metadata i32 1, metadata !101, metadata !DIExpression()) #10, !dbg !103
  store i32 1, i32* %.omp.stride.i, align 4, !dbg !107, !tbaa !46, !noalias !86
  %5 = bitcast i32* %.omp.is_last.i to i8*, !dbg !106
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #10, !dbg !106, !noalias !86
  call void @llvm.dbg.value(metadata i32 0, metadata !102, metadata !DIExpression()) #10, !dbg !103
  store i32 0, i32* %.omp.is_last.i, align 4, !dbg !107, !tbaa !46, !noalias !86
  %6 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr.i, i64 0, i32 4, !dbg !106
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @1, i64 0, i64 0), i8** %6, align 8, !dbg !106, !tbaa !60, !noalias !86
  %7 = load i32, i32* %.global_tid., align 4, !dbg !106, !tbaa !46, !alias.scope !86
  call void @llvm.dbg.value(metadata i32* %.omp.lb.i, metadata !99, metadata !DIExpression(DW_OP_deref)) #10, !dbg !103
  call void @llvm.dbg.value(metadata i32* %.omp.ub.i, metadata !100, metadata !DIExpression(DW_OP_deref)) #10, !dbg !103
  call void @llvm.dbg.value(metadata i32* %.omp.stride.i, metadata !101, metadata !DIExpression(DW_OP_deref)) #10, !dbg !103
  call void @llvm.dbg.value(metadata i32* %.omp.is_last.i, metadata !102, metadata !DIExpression(DW_OP_deref)) #10, !dbg !103
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull %.kmpc_loc.addr.i, i32 %7, i32 34, i32* nonnull %.omp.is_last.i, i32* nonnull %.omp.lb.i, i32* nonnull %.omp.ub.i, i32* nonnull %.omp.stride.i, i32 1, i32 1) #10, !dbg !106, !noalias !86
  %8 = load i32, i32* %.omp.ub.i, align 4, !dbg !107, !tbaa !46, !noalias !86
  call void @llvm.dbg.value(metadata i32 %8, metadata !100, metadata !DIExpression()) #10, !dbg !103
  %cmp6.i = icmp slt i32 %8, %1, !dbg !107
  %cond.i = select i1 %cmp6.i, i32 %8, i32 %sub3.i, !dbg !107
  call void @llvm.dbg.value(metadata i32 %cond.i, metadata !100, metadata !DIExpression()) #10, !dbg !103
  store i32 %cond.i, i32* %.omp.ub.i, align 4, !dbg !107, !tbaa !46, !noalias !86
  %9 = load i32, i32* %.omp.lb.i, align 4, !dbg !107, !tbaa !46, !noalias !86
  call void @llvm.dbg.value(metadata i32 %9, metadata !99, metadata !DIExpression()) #10, !dbg !103
  call void @llvm.dbg.value(metadata i32 %9, metadata !96, metadata !DIExpression()) #10, !dbg !103
  call void @llvm.dbg.value(metadata i32 %cond.i, metadata !100, metadata !DIExpression()) #10, !dbg !103
  %cmp71.i = icmp sgt i32 %9, %cond.i, !dbg !106
  br i1 %cmp71.i, label %omp.loop.exit.i, label %omp.inner.for.body.lr.ph.i, !dbg !106

omp.inner.for.body.lr.ph.i:                       ; preds = %omp.precond.then.i
  %10 = load double*, double** %flush, align 8, !dbg !103, !tbaa !53, !noalias !86
  %11 = sext i32 %9 to i64, !dbg !106
  %12 = sext i32 %cond.i to i64, !dbg !106
  %.pre.i = load double, double* %tmp, align 8, !dbg !108, !tbaa !57, !noalias !86
  br label %omp.inner.for.body.i, !dbg !106

omp.inner.for.body.i:                             ; preds = %omp.inner.for.body.i, %omp.inner.for.body.lr.ph.i
  %13 = phi double [ %add9.i, %omp.inner.for.body.i ], [ %.pre.i, %omp.inner.for.body.lr.ph.i ], !dbg !108
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %omp.inner.for.body.i ], [ %11, %omp.inner.for.body.lr.ph.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !96, metadata !DIExpression()) #10, !dbg !103
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !98, metadata !DIExpression()) #10, !dbg !103
  %arrayidx.i = getelementptr inbounds double, double* %10, i64 %indvars.iv.i, !dbg !109
  %14 = load double, double* %arrayidx.i, align 8, !dbg !109, !tbaa !57, !noalias !86
  %add9.i = fadd double %13, %14, !dbg !108
  store double %add9.i, double* %tmp, align 8, !dbg !108, !tbaa !57, !noalias !86
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, 1, !dbg !106
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !96, metadata !DIExpression()) #10, !dbg !103
  call void @llvm.dbg.value(metadata i32 %cond.i, metadata !100, metadata !DIExpression()) #10, !dbg !103
  %cmp7.i = icmp slt i64 %indvars.iv.i, %12, !dbg !106
  br i1 %cmp7.i, label %omp.inner.for.body.i, label %omp.loop.exit.i.loopexit, !dbg !106, !llvm.loop !110

omp.loop.exit.i.loopexit:                         ; preds = %omp.inner.for.body.i
  br label %omp.loop.exit.i, !dbg !111

omp.loop.exit.i:                                  ; preds = %omp.loop.exit.i.loopexit, %omp.precond.then.i
  store i8* getelementptr inbounds ([43 x i8], [43 x i8]* @2, i64 0, i64 0), i8** %6, align 8, !dbg !111, !tbaa !60, !noalias !86
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull %.kmpc_loc.addr.i, i32 %7) #10, !dbg !111, !noalias !86
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #10, !dbg !111, !noalias !86
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #10, !dbg !111, !noalias !86
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #10, !dbg !111, !noalias !86
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #10, !dbg !111, !noalias !86
  br label %.omp_outlined._debug__.exit, !dbg !111

.omp_outlined._debug__.exit:                      ; preds = %entry, %omp.loop.exit.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0), !dbg !113
  ret void, !dbg !114
}

declare !callback !115 dso_local void @__kmpc_fork_call(%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) local_unnamed_addr

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare !dbg !8 dso_local void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind uwtable
define dso_local void @polybench_prepare_instruments() local_unnamed_addr #0 !dbg !117 {
entry:
  %cs.i = alloca i32, align 4
  %flush.i = alloca double*, align 8
  %tmp.i = alloca double, align 8
  %.kmpc_loc.addr.i = alloca %struct.ident_t, align 8
  %0 = bitcast %struct.ident_t* %.kmpc_loc.addr.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %0, i8* nonnull align 8 dereferenceable(24) bitcast (%struct.ident_t* @3 to i8*), i64 16, i1 false) #10
  %1 = bitcast i32* %cs.i to i8*, !dbg !118
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #10, !dbg !118
  call void @llvm.dbg.value(metadata i32 4194560, metadata !39, metadata !DIExpression()) #10, !dbg !120
  store i32 4194560, i32* %cs.i, align 4, !dbg !121, !tbaa !46
  %2 = bitcast double** %flush.i to i8*, !dbg !122
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #10, !dbg !122
  call void @llvm.dbg.value(metadata i32 4194560, metadata !39, metadata !DIExpression()) #10, !dbg !120
  %call.i = tail call noalias dereferenceable_or_null(33556480) i8* @calloc(i64 4194560, i64 8) #10, !dbg !123
  call void @llvm.dbg.value(metadata i8* %call.i, metadata !40, metadata !DIExpression()) #10, !dbg !120
  %3 = bitcast double** %flush.i to i8**, !dbg !124
  store i8* %call.i, i8** %3, align 8, !dbg !124, !tbaa !53
  %4 = bitcast double* %tmp.i to i8*, !dbg !125
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #10, !dbg !125
  call void @llvm.dbg.value(metadata double 0.000000e+00, metadata !42, metadata !DIExpression()) #10, !dbg !120
  store double 0.000000e+00, double* %tmp.i, align 8, !dbg !126, !tbaa !57
  %5 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr.i, i64 0, i32 4, !dbg !127
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @1, i64 0, i64 0), i8** %5, align 8, !dbg !127, !tbaa !60
  call void @llvm.dbg.value(metadata i32* %cs.i, metadata !39, metadata !DIExpression(DW_OP_deref)) #10, !dbg !120
  call void @llvm.dbg.value(metadata double** %flush.i, metadata !40, metadata !DIExpression(DW_OP_deref)) #10, !dbg !120
  call void @llvm.dbg.value(metadata double* %tmp.i, metadata !42, metadata !DIExpression(DW_OP_deref)) #10, !dbg !120
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull %.kmpc_loc.addr.i, i32 3, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, double*, double**)* @.omp_outlined. to void (i32*, i32*, ...)*), i32* nonnull %cs.i, double* nonnull %tmp.i, double** nonnull %flush.i) #10, !dbg !127
  %6 = load double, double* %tmp.i, align 8, !dbg !128, !tbaa !57
  call void @llvm.dbg.value(metadata double %6, metadata !42, metadata !DIExpression()) #10, !dbg !120
  %cmp.i = fcmp ugt double %6, 1.000000e+01, !dbg !128
  br i1 %cmp.i, label %if.else.i, label %polybench_flush_cache.exit, !dbg !129

if.else.i:                                        ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__PRETTY_FUNCTION__.polybench_flush_cache, i64 0, i64 0)) #11, !dbg !128
  unreachable, !dbg !128

polybench_flush_cache.exit:                       ; preds = %entry
  %7 = load i8*, i8** %3, align 8, !dbg !130, !tbaa !53
  call void @llvm.dbg.value(metadata double* undef, metadata !40, metadata !DIExpression()) #10, !dbg !120
  call void @free(i8* %7) #10, !dbg !131
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #10, !dbg !132
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #10, !dbg !132
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #10, !dbg !132
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0), !dbg !132
  ret void, !dbg !133
}

; Function Attrs: nounwind uwtable
define dso_local void @polybench_timer_start() local_unnamed_addr #0 !dbg !134 {
entry:
  %cs.i.i = alloca i32, align 4
  %flush.i.i = alloca double*, align 8
  %tmp.i.i = alloca double, align 8
  %.kmpc_loc.addr.i.i = alloca %struct.ident_t, align 8
  %0 = bitcast %struct.ident_t* %.kmpc_loc.addr.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %0, i8* nonnull align 8 dereferenceable(24) bitcast (%struct.ident_t* @3 to i8*), i64 16, i1 false) #10
  %1 = bitcast i32* %cs.i.i to i8*, !dbg !135
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #10, !dbg !135
  call void @llvm.dbg.value(metadata i32 4194560, metadata !39, metadata !DIExpression()) #10, !dbg !138
  store i32 4194560, i32* %cs.i.i, align 4, !dbg !139, !tbaa !46
  %2 = bitcast double** %flush.i.i to i8*, !dbg !140
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #10, !dbg !140
  call void @llvm.dbg.value(metadata i32 4194560, metadata !39, metadata !DIExpression()) #10, !dbg !138
  %call.i.i = tail call noalias dereferenceable_or_null(33556480) i8* @calloc(i64 4194560, i64 8) #10, !dbg !141
  call void @llvm.dbg.value(metadata i8* %call.i.i, metadata !40, metadata !DIExpression()) #10, !dbg !138
  %3 = bitcast double** %flush.i.i to i8**, !dbg !142
  store i8* %call.i.i, i8** %3, align 8, !dbg !142, !tbaa !53
  %4 = bitcast double* %tmp.i.i to i8*, !dbg !143
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #10, !dbg !143
  call void @llvm.dbg.value(metadata double 0.000000e+00, metadata !42, metadata !DIExpression()) #10, !dbg !138
  store double 0.000000e+00, double* %tmp.i.i, align 8, !dbg !144, !tbaa !57
  %5 = getelementptr inbounds %struct.ident_t, %struct.ident_t* %.kmpc_loc.addr.i.i, i64 0, i32 4, !dbg !145
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @1, i64 0, i64 0), i8** %5, align 8, !dbg !145, !tbaa !60
  call void @llvm.dbg.value(metadata i32* %cs.i.i, metadata !39, metadata !DIExpression(DW_OP_deref)) #10, !dbg !138
  call void @llvm.dbg.value(metadata double** %flush.i.i, metadata !40, metadata !DIExpression(DW_OP_deref)) #10, !dbg !138
  call void @llvm.dbg.value(metadata double* %tmp.i.i, metadata !42, metadata !DIExpression(DW_OP_deref)) #10, !dbg !138
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull %.kmpc_loc.addr.i.i, i32 3, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, double*, double**)* @.omp_outlined. to void (i32*, i32*, ...)*), i32* nonnull %cs.i.i, double* nonnull %tmp.i.i, double** nonnull %flush.i.i) #10, !dbg !145
  %6 = load double, double* %tmp.i.i, align 8, !dbg !146, !tbaa !57
  call void @llvm.dbg.value(metadata double %6, metadata !42, metadata !DIExpression()) #10, !dbg !138
  %cmp.i.i = fcmp ugt double %6, 1.000000e+01, !dbg !146
  br i1 %cmp.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit, !dbg !147

if.else.i.i:                                      ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__PRETTY_FUNCTION__.polybench_flush_cache, i64 0, i64 0)) #11, !dbg !146
  unreachable, !dbg !146

polybench_prepare_instruments.exit:               ; preds = %entry
  %7 = load i8*, i8** %3, align 8, !dbg !148, !tbaa !53
  call void @llvm.dbg.value(metadata double* undef, metadata !40, metadata !DIExpression()) #10, !dbg !138
  call void @free(i8* %7) #10, !dbg !149
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #10, !dbg !150
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #10, !dbg !150
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #10, !dbg !150
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #10, !dbg !150
  store double 0.000000e+00, double* @polybench_t_start, align 8, !dbg !151, !tbaa !57
  ret void, !dbg !152
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define dso_local void @polybench_timer_stop() local_unnamed_addr #6 !dbg !153 {
entry:
  store double 0.000000e+00, double* @polybench_t_end, align 8, !dbg !154, !tbaa !57
  ret void, !dbg !155
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @polybench_timer_print() local_unnamed_addr #7 !dbg !156 {
entry:
  %0 = load double, double* @polybench_t_end, align 8, !dbg !157, !tbaa !57
  %1 = load double, double* @polybench_t_start, align 8, !dbg !158, !tbaa !57
  %sub = fsub double %0, %1, !dbg !159
  %call = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), double %sub), !dbg !160
  ret void, !dbg !161
}

; Function Attrs: nofree nounwind
declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local i8* @polybench_alloc_data(i32 %n, i32 %elt_size) local_unnamed_addr #0 !dbg !162 {
entry:
  %new.i = alloca i8*, align 8
  call void @llvm.dbg.value(metadata i32 %n, metadata !166, metadata !DIExpression()), !dbg !169
  call void @llvm.dbg.value(metadata i32 %elt_size, metadata !167, metadata !DIExpression()), !dbg !169
  %mul = mul nsw i32 %elt_size, %n, !dbg !170
  %conv = sext i32 %mul to i64, !dbg !171
  call void @llvm.dbg.value(metadata i64 %conv, metadata !172, metadata !DIExpression()) #10, !dbg !181
  %0 = bitcast i8** %new.i to i8*, !dbg !183
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #10, !dbg !183
  call void @llvm.dbg.value(metadata i8* null, metadata !179, metadata !DIExpression()) #10, !dbg !181
  store i8* null, i8** %new.i, align 8, !dbg !184, !tbaa !53
  call void @llvm.dbg.value(metadata i8** %new.i, metadata !179, metadata !DIExpression(DW_OP_deref)) #10, !dbg !181
  %call.i = call i32 @posix_memalign(i8** nonnull %new.i, i64 32, i64 %conv) #10, !dbg !185
  call void @llvm.dbg.value(metadata i32 %call.i, metadata !180, metadata !DIExpression()) #10, !dbg !181
  %1 = load i8*, i8** %new.i, align 8, !dbg !186, !tbaa !53
  call void @llvm.dbg.value(metadata i8* %1, metadata !179, metadata !DIExpression()) #10, !dbg !181
  %tobool.i = icmp eq i8* %1, null, !dbg !186
  %tobool1.i = icmp ne i32 %call.i, 0, !dbg !188
  %or.cond.i = or i1 %tobool1.i, %tobool.i, !dbg !189
  br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit, !dbg !189

if.then.i:                                        ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !190, !tbaa !53
  %3 = call i64 @fwrite(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.4, i64 0, i64 0), i64 50, i64 1, %struct._IO_FILE* %2) #12, !dbg !192
  call void @exit(i32 1) #11, !dbg !193
  unreachable, !dbg !193

xmalloc.exit:                                     ; preds = %entry
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #10, !dbg !194
  call void @llvm.dbg.value(metadata i8* %1, metadata !168, metadata !DIExpression()), !dbg !169
  ret i8* %1, !dbg !195
}

; Function Attrs: nofree nounwind
declare !dbg !13 dso_local i32 @posix_memalign(i8**, i64, i64) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #8

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #9

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable willreturn }
attributes #9 = { nofree nounwind }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { cold nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!31, !32, !33}
!llvm.ident = !{!34}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "polybench_t_start", scope: !2, file: !3, line: 51, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (git@github.com:SusanTan/llvm-project.git fcc6352b59353e5ddb5bfbd85a3919893d4595c9)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !19, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "polybench.c", directory: "/scratch/yc0769/xstack-benchmark/xstack-benchmark/polybench-3.1/linear-algebra/kernels/2mm")
!4 = !{}
!5 = !{!6, !8, !12, !13}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!8 = !DISubprogram(name: "free", scope: !9, file: !9, line: 565, type: !10, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !4)
!9 = !DIFile(filename: "/usr/include/stdlib.h", directory: "")
!10 = !DISubroutineType(types: !11)
!11 = !{null, !12}
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!13 = !DISubprogram(name: "posix_memalign", scope: !9, file: !9, line: 580, type: !14, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !4)
!14 = !DISubroutineType(types: !15)
!15 = !{!16, !17, !18, !18}
!16 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!18 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!19 = !{!0, !20, !22, !25, !27, !29}
!20 = !DIGlobalVariableExpression(var: !21, expr: !DIExpression())
!21 = distinct !DIGlobalVariable(name: "polybench_t_end", scope: !2, file: !3, line: 51, type: !7, isLocal: false, isDefinition: true)
!22 = !DIGlobalVariableExpression(var: !23, expr: !DIExpression())
!23 = distinct !DIGlobalVariable(name: "polybench_c_start", scope: !2, file: !3, line: 53, type: !24, isLocal: false, isDefinition: true)
!24 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "polybench_c_end", scope: !2, file: !3, line: 53, type: !24, isLocal: false, isDefinition: true)
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(name: "polybench_papi_counters_threadid", scope: !2, file: !3, line: 33, type: !16, isLocal: false, isDefinition: true)
!29 = !DIGlobalVariableExpression(var: !30, expr: !DIExpression())
!30 = distinct !DIGlobalVariable(name: "polybench_program_total_flops", scope: !2, file: !3, line: 34, type: !7, isLocal: false, isDefinition: true)
!31 = !{i32 7, !"Dwarf Version", i32 4}
!32 = !{i32 2, !"Debug Info Version", i32 3}
!33 = !{i32 1, !"wchar_size", i32 4}
!34 = !{!"clang version 10.0.1 (git@github.com:SusanTan/llvm-project.git fcc6352b59353e5ddb5bfbd85a3919893d4595c9)"}
!35 = distinct !DISubprogram(name: "polybench_flush_cache", scope: !3, file: !3, line: 86, type: !36, scopeLine: 87, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !38)
!36 = !DISubroutineType(types: !37)
!37 = !{null}
!38 = !{!39, !40, !41, !42}
!39 = !DILocalVariable(name: "cs", scope: !35, file: !3, line: 88, type: !16)
!40 = !DILocalVariable(name: "flush", scope: !35, file: !3, line: 89, type: !6)
!41 = !DILocalVariable(name: "i", scope: !35, file: !3, line: 90, type: !16)
!42 = !DILocalVariable(name: "tmp", scope: !35, file: !3, line: 91, type: !7)
!43 = !DILocation(line: 88, column: 3, scope: !35)
!44 = !DILocation(line: 0, scope: !35)
!45 = !DILocation(line: 88, column: 7, scope: !35)
!46 = !{!47, !47, i64 0}
!47 = !{!"int", !48, i64 0}
!48 = !{!"omnipotent char", !49, i64 0}
!49 = !{!"Simple C/C++ TBAA"}
!50 = !DILocation(line: 89, column: 3, scope: !35)
!51 = !DILocation(line: 89, column: 29, scope: !35)
!52 = !DILocation(line: 89, column: 11, scope: !35)
!53 = !{!54, !54, i64 0}
!54 = !{!"any pointer", !48, i64 0}
!55 = !DILocation(line: 91, column: 3, scope: !35)
!56 = !DILocation(line: 91, column: 10, scope: !35)
!57 = !{!58, !58, i64 0}
!58 = !{!"double", !48, i64 0}
!59 = !DILocation(line: 93, column: 1, scope: !35)
!60 = !{!61, !54, i64 16}
!61 = !{!"ident_t", !47, i64 0, !47, i64 4, !47, i64 8, !47, i64 12, !54, i64 16}
!62 = !DILocation(line: 97, column: 3, scope: !63)
!63 = distinct !DILexicalBlock(scope: !64, file: !3, line: 97, column: 3)
!64 = distinct !DILexicalBlock(scope: !35, file: !3, line: 97, column: 3)
!65 = !DILocation(line: 97, column: 3, scope: !64)
!66 = !DILocation(line: 98, column: 9, scope: !35)
!67 = !DILocation(line: 98, column: 3, scope: !35)
!68 = !DILocation(line: 99, column: 1, scope: !35)
!69 = distinct !DISubprogram(name: ".omp_outlined.", scope: !3, file: !3, line: 95, type: !70, scopeLine: 95, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !79)
!70 = !DISubroutineType(types: !71)
!71 = !{null, !72, !72, !76, !77, !78}
!72 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !73)
!73 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !74)
!74 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !75, size: 64)
!75 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!76 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !16, size: 64)
!77 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !7, size: 64)
!78 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !6, size: 64)
!79 = !{!80, !81, !82, !83, !84}
!80 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !69, type: !72, flags: DIFlagArtificial)
!81 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !69, type: !72, flags: DIFlagArtificial)
!82 = !DILocalVariable(name: "cs", arg: 3, scope: !69, type: !76, flags: DIFlagArtificial)
!83 = !DILocalVariable(name: "tmp", arg: 4, scope: !69, type: !77, flags: DIFlagArtificial)
!84 = !DILocalVariable(name: "flush", arg: 5, scope: !69, type: !78, flags: DIFlagArtificial)
!85 = !DILocation(line: 0, scope: !69)
!86 = !{!87}
!87 = distinct !{!87, !88, !".omp_outlined._debug__: %.global_tid."}
!88 = distinct !{!88, !".omp_outlined._debug__"}
!89 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !90, type: !72, flags: DIFlagArtificial)
!90 = distinct !DISubprogram(name: ".omp_outlined._debug__", scope: !3, file: !3, line: 95, type: !70, scopeLine: 95, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !91)
!91 = !{!89, !92, !93, !94, !95, !96, !97, !97, !98, !99, !100, !101, !102, !98}
!92 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !90, type: !72, flags: DIFlagArtificial)
!93 = !DILocalVariable(name: "cs", arg: 3, scope: !90, file: !3, line: 88, type: !76)
!94 = !DILocalVariable(name: "tmp", arg: 4, scope: !90, file: !3, line: 91, type: !77)
!95 = !DILocalVariable(name: "flush", arg: 5, scope: !90, file: !3, line: 89, type: !78)
!96 = !DILocalVariable(name: ".omp.iv", scope: !90, type: !16, flags: DIFlagArtificial)
!97 = !DILocalVariable(name: ".capture_expr.", scope: !90, type: !16, flags: DIFlagArtificial)
!98 = !DILocalVariable(name: "i", scope: !90, type: !16, flags: DIFlagArtificial)
!99 = !DILocalVariable(name: ".omp.lb", scope: !90, type: !16, flags: DIFlagArtificial)
!100 = !DILocalVariable(name: ".omp.ub", scope: !90, type: !16, flags: DIFlagArtificial)
!101 = !DILocalVariable(name: ".omp.stride", scope: !90, type: !16, flags: DIFlagArtificial)
!102 = !DILocalVariable(name: ".omp.is_last", scope: !90, type: !16, flags: DIFlagArtificial)
!103 = !DILocation(line: 0, scope: !90, inlinedAt: !104)
!104 = distinct !DILocation(line: 95, column: 3, scope: !69)
!105 = !DILocation(line: 95, column: 19, scope: !90, inlinedAt: !104)
!106 = !DILocation(line: 95, column: 3, scope: !90, inlinedAt: !104)
!107 = !DILocation(line: 95, column: 8, scope: !90, inlinedAt: !104)
!108 = !DILocation(line: 96, column: 9, scope: !90, inlinedAt: !104)
!109 = !DILocation(line: 96, column: 12, scope: !90, inlinedAt: !104)
!110 = distinct !{!110, !111, !112}
!111 = !DILocation(line: 93, column: 1, scope: !90, inlinedAt: !104)
!112 = !DILocation(line: 93, column: 25, scope: !90, inlinedAt: !104)
!113 = !DILocation(line: 96, column: 19, scope: !90, inlinedAt: !104)
!114 = !DILocation(line: 95, column: 3, scope: !69)
!115 = !{!116}
!116 = !{i64 2, i64 -1, i64 -1, i1 true}
!117 = distinct !DISubprogram(name: "polybench_prepare_instruments", scope: !3, file: !3, line: 322, type: !36, scopeLine: 323, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4)
!118 = !DILocation(line: 88, column: 3, scope: !35, inlinedAt: !119)
!119 = distinct !DILocation(line: 325, column: 3, scope: !117)
!120 = !DILocation(line: 0, scope: !35, inlinedAt: !119)
!121 = !DILocation(line: 88, column: 7, scope: !35, inlinedAt: !119)
!122 = !DILocation(line: 89, column: 3, scope: !35, inlinedAt: !119)
!123 = !DILocation(line: 89, column: 29, scope: !35, inlinedAt: !119)
!124 = !DILocation(line: 89, column: 11, scope: !35, inlinedAt: !119)
!125 = !DILocation(line: 91, column: 3, scope: !35, inlinedAt: !119)
!126 = !DILocation(line: 91, column: 10, scope: !35, inlinedAt: !119)
!127 = !DILocation(line: 93, column: 1, scope: !35, inlinedAt: !119)
!128 = !DILocation(line: 97, column: 3, scope: !63, inlinedAt: !119)
!129 = !DILocation(line: 97, column: 3, scope: !64, inlinedAt: !119)
!130 = !DILocation(line: 98, column: 9, scope: !35, inlinedAt: !119)
!131 = !DILocation(line: 98, column: 3, scope: !35, inlinedAt: !119)
!132 = !DILocation(line: 99, column: 1, scope: !35, inlinedAt: !119)
!133 = !DILocation(line: 330, column: 1, scope: !117)
!134 = distinct !DISubprogram(name: "polybench_timer_start", scope: !3, file: !3, line: 333, type: !36, scopeLine: 334, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4)
!135 = !DILocation(line: 88, column: 3, scope: !35, inlinedAt: !136)
!136 = distinct !DILocation(line: 325, column: 3, scope: !117, inlinedAt: !137)
!137 = distinct !DILocation(line: 335, column: 3, scope: !134)
!138 = !DILocation(line: 0, scope: !35, inlinedAt: !136)
!139 = !DILocation(line: 88, column: 7, scope: !35, inlinedAt: !136)
!140 = !DILocation(line: 89, column: 3, scope: !35, inlinedAt: !136)
!141 = !DILocation(line: 89, column: 29, scope: !35, inlinedAt: !136)
!142 = !DILocation(line: 89, column: 11, scope: !35, inlinedAt: !136)
!143 = !DILocation(line: 91, column: 3, scope: !35, inlinedAt: !136)
!144 = !DILocation(line: 91, column: 10, scope: !35, inlinedAt: !136)
!145 = !DILocation(line: 93, column: 1, scope: !35, inlinedAt: !136)
!146 = !DILocation(line: 97, column: 3, scope: !63, inlinedAt: !136)
!147 = !DILocation(line: 97, column: 3, scope: !64, inlinedAt: !136)
!148 = !DILocation(line: 98, column: 9, scope: !35, inlinedAt: !136)
!149 = !DILocation(line: 98, column: 3, scope: !35, inlinedAt: !136)
!150 = !DILocation(line: 99, column: 1, scope: !35, inlinedAt: !136)
!151 = !DILocation(line: 337, column: 21, scope: !134)
!152 = !DILocation(line: 341, column: 1, scope: !134)
!153 = distinct !DISubprogram(name: "polybench_timer_stop", scope: !3, file: !3, line: 344, type: !36, scopeLine: 345, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4)
!154 = !DILocation(line: 347, column: 19, scope: !153)
!155 = !DILocation(line: 354, column: 1, scope: !153)
!156 = distinct !DISubprogram(name: "polybench_timer_print", scope: !3, file: !3, line: 357, type: !36, scopeLine: 358, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4)
!157 = !DILocation(line: 371, column: 26, scope: !156)
!158 = !DILocation(line: 371, column: 44, scope: !156)
!159 = !DILocation(line: 371, column: 42, scope: !156)
!160 = !DILocation(line: 371, column: 7, scope: !156)
!161 = !DILocation(line: 376, column: 1, scope: !156)
!162 = distinct !DISubprogram(name: "polybench_alloc_data", scope: !3, file: !3, line: 395, type: !163, scopeLine: 396, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !165)
!163 = !DISubroutineType(types: !164)
!164 = !{!12, !16, !16}
!165 = !{!166, !167, !168}
!166 = !DILocalVariable(name: "n", arg: 1, scope: !162, file: !3, line: 395, type: !16)
!167 = !DILocalVariable(name: "elt_size", arg: 2, scope: !162, file: !3, line: 395, type: !16)
!168 = !DILocalVariable(name: "ret", scope: !162, file: !3, line: 397, type: !12)
!169 = !DILocation(line: 0, scope: !162)
!170 = !DILocation(line: 397, column: 26, scope: !162)
!171 = !DILocation(line: 397, column: 24, scope: !162)
!172 = !DILocalVariable(name: "num", arg: 1, scope: !173, file: !3, line: 382, type: !176)
!173 = distinct !DISubprogram(name: "xmalloc", scope: !3, file: !3, line: 382, type: !174, scopeLine: 383, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !178)
!174 = !DISubroutineType(types: !175)
!175 = !{!12, !176}
!176 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !177, line: 46, baseType: !18)
!177 = !DIFile(filename: "/u/NAS_SCRATCH/yc0769/xstack/xstack-installs/llvm-install-debug/lib/clang/10.0.1/include/stddef.h", directory: "")
!178 = !{!172, !179, !180}
!179 = !DILocalVariable(name: "new", scope: !173, file: !3, line: 384, type: !12)
!180 = !DILocalVariable(name: "ret", scope: !173, file: !3, line: 385, type: !16)
!181 = !DILocation(line: 0, scope: !173, inlinedAt: !182)
!182 = distinct !DILocation(line: 397, column: 15, scope: !162)
!183 = !DILocation(line: 384, column: 3, scope: !173, inlinedAt: !182)
!184 = !DILocation(line: 384, column: 9, scope: !173, inlinedAt: !182)
!185 = !DILocation(line: 385, column: 13, scope: !173, inlinedAt: !182)
!186 = !DILocation(line: 386, column: 9, scope: !187, inlinedAt: !182)
!187 = distinct !DILexicalBlock(scope: !173, file: !3, line: 386, column: 7)
!188 = !DILocation(line: 386, column: 16, scope: !187, inlinedAt: !182)
!189 = !DILocation(line: 386, column: 13, scope: !187, inlinedAt: !182)
!190 = !DILocation(line: 388, column: 16, scope: !191, inlinedAt: !182)
!191 = distinct !DILexicalBlock(scope: !187, file: !3, line: 387, column: 5)
!192 = !DILocation(line: 388, column: 7, scope: !191, inlinedAt: !182)
!193 = !DILocation(line: 389, column: 7, scope: !191, inlinedAt: !182)
!194 = !DILocation(line: 392, column: 1, scope: !173, inlinedAt: !182)
!195 = !DILocation(line: 399, column: 3, scope: !162)
