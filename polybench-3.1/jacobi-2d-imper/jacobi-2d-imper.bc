; ModuleID = 'jacobi-2d-imper.bc'
source_filename = "jacobi-2d-imper.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.ident_t = type { i32, i32, i32, i32, i8* }

@stderr = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [8 x i8] c"%0.2lf \00", align 1
@.str.ident = private constant [23 x i8] c"Source location dummy.\00", align 1
@.loc.dummy = private constant %struct.ident_t { i32 0, i32 0, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.ident, i32 0, i32 0) }, align 8

; Function Attrs: nounwind uwtable
define dso_local i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 !dbg !22 {
entry:
  %polly.par.userContext = alloca { i64, i64, i8*, i8* }, align 8
  call void @llvm.dbg.value(metadata i32 %argc, metadata !26, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata i8** %argv, metadata !27, metadata !DIExpression()), !dbg !33
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !34
  %0 = load i8*, i8** %arrayidx, align 8, !dbg !34, !tbaa !35
  call void @llvm.dbg.value(metadata i8* %0, metadata !39, metadata !DIExpression()) #7, !dbg !46
  %call.i = tail call i64 @strtol(i8* nocapture nonnull %0, i8** null, i32 10) #7, !dbg !48
  %conv.i = trunc i64 %call.i to i32, !dbg !49
  call void @llvm.dbg.value(metadata i32 %conv.i, metadata !28, metadata !DIExpression()), !dbg !33
  %arrayidx1 = getelementptr inbounds i8*, i8** %argv, i64 2, !dbg !50
  %1 = load i8*, i8** %arrayidx1, align 8, !dbg !50, !tbaa !35
  call void @llvm.dbg.value(metadata i8* %1, metadata !39, metadata !DIExpression()) #7, !dbg !51
  %call.i38 = tail call i64 @strtol(i8* nocapture nonnull %1, i8** null, i32 10) #7, !dbg !53
  %conv.i39 = trunc i64 %call.i38 to i32, !dbg !54
  call void @llvm.dbg.value(metadata i32 %conv.i39, metadata !29, metadata !DIExpression()), !dbg !33
  %arrayidx3 = getelementptr inbounds i8*, i8** %argv, i64 3, !dbg !55
  %2 = load i8*, i8** %arrayidx3, align 8, !dbg !55, !tbaa !35
  call void @llvm.dbg.value(metadata i8* %2, metadata !39, metadata !DIExpression()) #7, !dbg !56
  %call.i40 = tail call i64 @strtol(i8* nocapture nonnull %2, i8** null, i32 10) #7, !dbg !58
  %conv.i41 = trunc i64 %call.i40 to i32, !dbg !59
  call void @llvm.dbg.value(metadata i32 %conv.i41, metadata !30, metadata !DIExpression()), !dbg !33
  %mul = shl i64 %call.i38, 3, !dbg !60
  %conv = mul i64 %mul, %call.i38, !dbg !61
  %mul5 = and i64 %conv, 34359738360, !dbg !61
  %call6 = tail call noalias i8* @malloc(i64 %mul5) #7, !dbg !62
  %3 = bitcast i8* %call6 to double*, !dbg !63
  call void @llvm.dbg.value(metadata double* %3, metadata !31, metadata !DIExpression()), !dbg !33
  %call10 = tail call noalias i8* @malloc(i64 %mul5) #7, !dbg !64
  %4 = bitcast i8* %call10 to double*, !dbg !65
  call void @llvm.dbg.value(metadata double* %4, metadata !32, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata i32 %conv.i39, metadata !66, metadata !DIExpression()), !dbg !78
  call void @llvm.dbg.value(metadata double* %3, metadata !74, metadata !DIExpression()), !dbg !78
  call void @llvm.dbg.value(metadata double* %4, metadata !75, metadata !DIExpression()), !dbg !78
  %5 = and i64 %call.i38, 4294967295
  call void @llvm.dbg.value(metadata i32 0, metadata !76, metadata !DIExpression()), !dbg !78
  %cmp43.i = icmp sgt i32 %conv.i39, 0, !dbg !80
  br i1 %cmp43.i, label %for.cond1.preheader.lr.ph.i, label %init_array.exit, !dbg !83

for.cond1.preheader.lr.ph.i:                      ; preds = %entry
  %conv6.i = sitofp i32 %conv.i39 to double, !dbg !84
  br label %for.body3.lr.ph.i, !dbg !83

for.body3.lr.ph.i:                                ; preds = %for.inc20.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv48.i = phi i64 [ 0, %for.cond1.preheader.lr.ph.i ], [ %indvars.iv.next49.i, %for.inc20.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv48.i, metadata !76, metadata !DIExpression()), !dbg !78
  call void @llvm.dbg.value(metadata i32 0, metadata !77, metadata !DIExpression()), !dbg !78
  %6 = trunc i64 %indvars.iv48.i to i32, !dbg !84
  %conv.i42 = sitofp i32 %6 to double, !dbg !84
  %7 = mul nuw nsw i64 %indvars.iv48.i, %5, !dbg !84
  %arrayidx.i = getelementptr inbounds double, double* %3, i64 %7, !dbg !84
  %arrayidx17.i = getelementptr inbounds double, double* %4, i64 %7, !dbg !84
  br label %for.body3.i, !dbg !88

for.body3.i:                                      ; preds = %for.body3.i, %for.body3.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body3.lr.ph.i ], [ %indvars.iv.next.i, %for.body3.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !77, metadata !DIExpression()), !dbg !78
  %8 = trunc i64 %indvars.iv.i to i32, !dbg !89
  %9 = add i32 %8, 2, !dbg !89
  %conv4.i = sitofp i32 %9 to double, !dbg !89
  %mul.i = fmul double %conv.i42, %conv4.i, !dbg !90
  %add5.i = fadd double %mul.i, 2.000000e+00, !dbg !91
  %div.i = fdiv double %add5.i, %conv6.i, !dbg !92
  %arrayidx8.i = getelementptr inbounds double, double* %arrayidx.i, i64 %indvars.iv.i, !dbg !93
  store double %div.i, double* %arrayidx8.i, align 8, !dbg !94, !tbaa !95
  %10 = add i32 %8, 3, !dbg !97
  %conv11.i = sitofp i32 %10 to double, !dbg !97
  %mul12.i = fmul double %conv.i42, %conv11.i, !dbg !98
  %add13.i = fadd double %mul12.i, 3.000000e+00, !dbg !99
  %div15.i = fdiv double %add13.i, %conv6.i, !dbg !100
  %arrayidx19.i = getelementptr inbounds double, double* %arrayidx17.i, i64 %indvars.iv.i, !dbg !101
  store double %div15.i, double* %arrayidx19.i, align 8, !dbg !102, !tbaa !95
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !103
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !77, metadata !DIExpression()), !dbg !78
  %exitcond.i = icmp eq i64 %indvars.iv.next.i, %5, !dbg !104
  br i1 %exitcond.i, label %for.inc20.i, label %for.body3.i, !dbg !88, !llvm.loop !105

for.inc20.i:                                      ; preds = %for.body3.i
  %indvars.iv.next49.i = add nuw nsw i64 %indvars.iv48.i, 1, !dbg !107
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next49.i, metadata !76, metadata !DIExpression()), !dbg !78
  %exitcond51.i = icmp eq i64 %indvars.iv.next49.i, %5, !dbg !80
  br i1 %exitcond51.i, label %init_array.exit.loopexit, label %for.body3.lr.ph.i, !dbg !83, !llvm.loop !108

init_array.exit.loopexit:                         ; preds = %for.inc20.i
  br label %init_array.exit, !dbg !110

init_array.exit:                                  ; preds = %init_array.exit.loopexit, %entry
  call void @llvm.dbg.value(metadata i32 %conv.i41, metadata !117, metadata !DIExpression()), !dbg !125
  call void @llvm.dbg.value(metadata i32 %conv.i39, metadata !118, metadata !DIExpression()), !dbg !125
  call void @llvm.dbg.value(metadata double* %3, metadata !119, metadata !DIExpression()), !dbg !125
  call void @llvm.dbg.value(metadata double* %4, metadata !120, metadata !DIExpression()), !dbg !125
  call void @llvm.dbg.value(metadata i32 0, metadata !121, metadata !DIExpression()), !dbg !125
  %cmp114.i = icmp sgt i32 %conv.i41, 0, !dbg !110
  br i1 %cmp114.i, label %for.cond1.preheader.lr.ph.i51, label %kernel_jacobi_2d_imper.exit, !dbg !126

for.cond1.preheader.lr.ph.i51:                    ; preds = %init_array.exit
  %cmp2106.i = icmp sgt i32 %conv.i39, 2, !dbg !127
  %11 = add i64 %call.i38, 4294967295, !dbg !126
  %wide.trip.count121.i = and i64 %11, 4294967295, !dbg !127
  %12 = shl nuw nsw i64 %5, 3, !dbg !126
  %13 = add nuw nsw i64 %12, 8, !dbg !126
  %14 = shl nuw nsw i64 %wide.trip.count121.i, 3, !dbg !126
  %15 = add nsw i64 %14, -8, !dbg !126
  %scevgep62 = getelementptr i8, i8* %call6, i64 8, !dbg !126
  %16 = icmp ult i64 %call.i38, 2147483648
  %17 = add nsw i64 %call.i38, -3
  %polly.fdiv_q.shr = ashr i64 %17, 5
  %polly.subfn.storeaddr.call.i38 = getelementptr inbounds { i64, i64, i8*, i8* }, { i64, i64, i8*, i8* }* %polly.par.userContext, i64 0, i32 0
  %polly.subfn.storeaddr. = getelementptr inbounds { i64, i64, i8*, i8* }, { i64, i64, i8*, i8* }* %polly.par.userContext, i64 0, i32 1
  %polly.subfn.storeaddr.call10 = getelementptr inbounds { i64, i64, i8*, i8* }, { i64, i64, i8*, i8* }* %polly.par.userContext, i64 0, i32 2
  %polly.subfn.storeaddr.call6 = getelementptr inbounds { i64, i64, i8*, i8* }, { i64, i64, i8*, i8* }* %polly.par.userContext, i64 0, i32 3
  %18 = add nsw i64 %polly.fdiv_q.shr, 1
  %19 = add i64 %call.i38, -2, !dbg !126
  %call.i38.off = add nsw i64 %call.i38, -3
  %20 = icmp ugt i64 %call.i38.off, 2147483644
  br label %for.cond1.preheader.i, !dbg !126

for.cond1.preheader.i:                            ; preds = %for.inc62.i, %for.cond1.preheader.lr.ph.i51
  %indvar60 = phi i64 [ %indvar.next61, %for.inc62.i ], [ 0, %for.cond1.preheader.lr.ph.i51 ]
  %t.0115.i = phi i32 [ %inc63.i, %for.inc62.i ], [ 0, %for.cond1.preheader.lr.ph.i51 ]
  call void @llvm.dbg.value(metadata i32 %t.0115.i, metadata !121, metadata !DIExpression()), !dbg !125
  call void @llvm.dbg.value(metadata i32 1, metadata !122, metadata !DIExpression()), !dbg !125
  br i1 %cmp2106.i, label %polly.split_new_and_old, label %for.inc62.i, !dbg !131

polly.split_new_and_old:                          ; preds = %for.cond1.preheader.i
  br i1 %16, label %polly.start, label %for.body7.lr.ph.i.preheader

for.body7.lr.ph.i.preheader:                      ; preds = %polly.split_new_and_old
  br label %for.body7.lr.ph.i, !dbg !131

for.body7.lr.ph.i:                                ; preds = %for.body7.lr.ph.i.preheader, %for.inc37.i
  %indvars.iv117.i = phi i64 [ %22, %for.inc37.i ], [ 1, %for.body7.lr.ph.i.preheader ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv117.i, metadata !122, metadata !DIExpression()), !dbg !125
  call void @llvm.dbg.value(metadata i32 1, metadata !123, metadata !DIExpression()), !dbg !125
  %21 = mul nuw nsw i64 %indvars.iv117.i, %5, !dbg !132
  %arrayidx.i52 = getelementptr inbounds double, double* %3, i64 %21, !dbg !132
  %22 = add nuw nsw i64 %indvars.iv117.i, 1, !dbg !132
  %23 = mul nuw nsw i64 %22, %5, !dbg !132
  %arrayidx23.i = getelementptr inbounds double, double* %3, i64 %23, !dbg !132
  %24 = add nsw i64 %indvars.iv117.i, -1, !dbg !132
  %25 = mul nuw nsw i64 %24, %5, !dbg !132
  %arrayidx29.i = getelementptr inbounds double, double* %3, i64 %25, !dbg !132
  %arrayidx34.i = getelementptr inbounds double, double* %4, i64 %21, !dbg !132
  %arrayidx9.i.phi.trans.insert = getelementptr inbounds double, double* %arrayidx.i52, i64 1, !dbg !132
  %.pre = load double, double* %arrayidx9.i.phi.trans.insert, align 8, !dbg !135, !tbaa !95
  br label %for.body7.i, !dbg !136

for.body7.i:                                      ; preds = %for.body7.i, %for.body7.lr.ph.i
  %26 = phi double [ %.pre, %for.body7.lr.ph.i ], [ %29, %for.body7.i ], !dbg !135
  %indvars.iv.i53 = phi i64 [ 1, %for.body7.lr.ph.i ], [ %indvars.iv.next.i55, %for.body7.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i53, metadata !123, metadata !DIExpression()), !dbg !125
  %27 = add nsw i64 %indvars.iv.i53, -1, !dbg !137
  %arrayidx14.i = getelementptr inbounds double, double* %arrayidx.i52, i64 %27, !dbg !138
  %28 = load double, double* %arrayidx14.i, align 8, !dbg !138, !tbaa !95
  %add.i54 = fadd double %26, %28, !dbg !139
  %indvars.iv.next.i55 = add nuw nsw i64 %indvars.iv.i53, 1, !dbg !140
  %arrayidx19.i56 = getelementptr inbounds double, double* %arrayidx.i52, i64 %indvars.iv.next.i55, !dbg !141
  %29 = load double, double* %arrayidx19.i56, align 8, !dbg !141, !tbaa !95
  %add20.i = fadd double %add.i54, %29, !dbg !142
  %arrayidx25.i = getelementptr inbounds double, double* %arrayidx23.i, i64 %indvars.iv.i53, !dbg !143
  %30 = load double, double* %arrayidx25.i, align 8, !dbg !143, !tbaa !95
  %add26.i = fadd double %add20.i, %30, !dbg !144
  %arrayidx31.i = getelementptr inbounds double, double* %arrayidx29.i, i64 %indvars.iv.i53, !dbg !145
  %31 = load double, double* %arrayidx31.i, align 8, !dbg !145, !tbaa !95
  %add32.i = fadd double %add26.i, %31, !dbg !146
  %mul.i57 = fmul double %add32.i, 2.000000e-01, !dbg !147
  %arrayidx36.i = getelementptr inbounds double, double* %arrayidx34.i, i64 %indvars.iv.i53, !dbg !148
  store double %mul.i57, double* %arrayidx36.i, align 8, !dbg !149, !tbaa !95
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i55, metadata !123, metadata !DIExpression()), !dbg !125
  %exitcond.i58 = icmp eq i64 %indvars.iv.next.i55, %wide.trip.count121.i, !dbg !150
  br i1 %exitcond.i58, label %for.inc37.i, label %for.body7.i, !dbg !136, !llvm.loop !151

for.inc37.i:                                      ; preds = %for.body7.i
  call void @llvm.dbg.value(metadata i64 %22, metadata !122, metadata !DIExpression()), !dbg !125
  %exitcond122.i = icmp eq i64 %22, %wide.trip.count121.i, !dbg !153
  br i1 %exitcond122.i, label %for.body47.lr.ph.i.preheader.loopexit, label %for.body7.lr.ph.i, !dbg !131, !llvm.loop !154

for.body47.lr.ph.i.preheader.loopexit:            ; preds = %for.inc37.i
  br label %for.body47.lr.ph.i.preheader, !dbg !156

for.body47.lr.ph.i.preheader:                     ; preds = %for.body47.lr.ph.i.preheader.loopexit, %polly.parallel.for
  br label %for.body47.lr.ph.i, !dbg !156

for.body47.lr.ph.i:                               ; preds = %for.body47.lr.ph.i.preheader, %for.body47.lr.ph.i
  %indvar = phi i64 [ %indvar.next, %for.body47.lr.ph.i ], [ 0, %for.body47.lr.ph.i.preheader ]
  %indvars.iv128.i = phi i64 [ %indvars.iv.next129.i, %for.body47.lr.ph.i ], [ 1, %for.body47.lr.ph.i.preheader ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv128.i, metadata !122, metadata !DIExpression()), !dbg !125
  call void @llvm.dbg.value(metadata i32 1, metadata !123, metadata !DIExpression()), !dbg !125
  %32 = mul i64 %indvar, %12, !dbg !158
  %33 = add i64 %13, %32, !dbg !158
  %scevgep = getelementptr i8, i8* %call6, i64 %33, !dbg !158
  %scevgep59 = getelementptr i8, i8* %call10, i64 %33, !dbg !158
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep, i8* align 8 %scevgep59, i64 %15, i1 false), !dbg !162
  call void @llvm.dbg.value(metadata i32 undef, metadata !123, metadata !DIExpression()), !dbg !125
  %indvars.iv.next129.i = add nuw nsw i64 %indvars.iv128.i, 1, !dbg !163
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next129.i, metadata !122, metadata !DIExpression()), !dbg !125
  %exitcond131.i = icmp eq i64 %indvars.iv.next129.i, %wide.trip.count121.i, !dbg !164
  %indvar.next = add nuw i64 %indvar, 1, !dbg !156
  br i1 %exitcond131.i, label %for.inc62.i.loopexit, label %for.body47.lr.ph.i, !dbg !156, !llvm.loop !165

for.inc62.i.loopexit:                             ; preds = %for.body47.lr.ph.i
  br label %for.inc62.i, !dbg !167

for.inc62.i:                                      ; preds = %for.inc62.i.loopexit, %for.cond1.preheader.i
  %inc63.i = add nuw nsw i32 %t.0115.i, 1, !dbg !167
  call void @llvm.dbg.value(metadata i32 %inc63.i, metadata !121, metadata !DIExpression()), !dbg !125
  %exitcond132.i = icmp eq i32 %inc63.i, %conv.i41, !dbg !110
  %indvar.next61 = add nuw nsw i64 %indvar60, 1, !dbg !126
  br i1 %exitcond132.i, label %kernel_jacobi_2d_imper.exit.loopexit, label %for.cond1.preheader.i, !dbg !126, !llvm.loop !168

kernel_jacobi_2d_imper.exit.loopexit:             ; preds = %for.inc62.i
  br label %kernel_jacobi_2d_imper.exit, !dbg !170

kernel_jacobi_2d_imper.exit:                      ; preds = %kernel_jacobi_2d_imper.exit.loopexit, %init_array.exit
  %cmp = icmp eq i32 %conv.i, 1, !dbg !170
  br i1 %cmp, label %if.then, label %if.end, !dbg !172

if.then:                                          ; preds = %kernel_jacobi_2d_imper.exit
  call void @llvm.dbg.value(metadata i32 %conv.i39, metadata !173, metadata !DIExpression()) #7, !dbg !181
  call void @llvm.dbg.value(metadata double* %3, metadata !178, metadata !DIExpression()) #7, !dbg !181
  call void @llvm.dbg.value(metadata i32 0, metadata !179, metadata !DIExpression()) #7, !dbg !181
  br i1 %cmp43.i, label %for.body3.lr.ph.i45.preheader, label %print_array.exit, !dbg !183

for.body3.lr.ph.i45.preheader:                    ; preds = %if.then
  br label %for.body3.lr.ph.i45, !dbg !183

for.body3.lr.ph.i45:                              ; preds = %for.body3.lr.ph.i45.preheader, %for.inc8.i
  %indvars.iv32.i = phi i64 [ %indvars.iv.next33.i, %for.inc8.i ], [ 0, %for.body3.lr.ph.i45.preheader ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv32.i, metadata !179, metadata !DIExpression()) #7, !dbg !181
  call void @llvm.dbg.value(metadata i32 0, metadata !180, metadata !DIExpression()) #7, !dbg !181
  %34 = mul nuw nsw i64 %indvars.iv32.i, %5, !dbg !185
  %arrayidx.i43 = getelementptr inbounds double, double* %3, i64 %34, !dbg !185
  %35 = trunc i64 %indvars.iv32.i to i32, !dbg !190
  %mul.i44 = mul nsw i32 %35, %conv.i39, !dbg !190
  br label %for.body3.i48, !dbg !192

for.body3.i48:                                    ; preds = %for.inc.i, %for.body3.lr.ph.i45
  %indvars.iv.i46 = phi i64 [ 0, %for.body3.lr.ph.i45 ], [ %indvars.iv.next.i49, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i46, metadata !180, metadata !DIExpression()) #7, !dbg !181
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !193, !tbaa !35
  %arrayidx5.i = getelementptr inbounds double, double* %arrayidx.i43, i64 %indvars.iv.i46, !dbg !194
  %37 = load double, double* %arrayidx5.i, align 8, !dbg !194, !tbaa !95
  %call.i47 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %37) #8, !dbg !195
  %38 = trunc i64 %indvars.iv.i46 to i32, !dbg !196
  %add.i = add nsw i32 %mul.i44, %38, !dbg !196
  %rem.i = srem i32 %add.i, 20, !dbg !197
  %cmp6.i = icmp eq i32 %rem.i, 0, !dbg !198
  br i1 %cmp6.i, label %if.then.i, label %for.inc.i, !dbg !199

if.then.i:                                        ; preds = %for.body3.i48
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !200, !tbaa !35
  %fputc26.i = tail call i32 @fputc(i32 10, %struct._IO_FILE* %39) #8, !dbg !201
  br label %for.inc.i, !dbg !201

for.inc.i:                                        ; preds = %if.then.i, %for.body3.i48
  %indvars.iv.next.i49 = add nuw nsw i64 %indvars.iv.i46, 1, !dbg !202
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i49, metadata !180, metadata !DIExpression()) #7, !dbg !181
  %exitcond.i50 = icmp eq i64 %indvars.iv.next.i49, %5, !dbg !203
  br i1 %exitcond.i50, label %for.inc8.i, label %for.body3.i48, !dbg !192, !llvm.loop !204

for.inc8.i:                                       ; preds = %for.inc.i
  %indvars.iv.next33.i = add nuw nsw i64 %indvars.iv32.i, 1, !dbg !206
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next33.i, metadata !179, metadata !DIExpression()) #7, !dbg !181
  %exitcond35.i = icmp eq i64 %indvars.iv.next33.i, %5, !dbg !207
  br i1 %exitcond35.i, label %print_array.exit.loopexit, label %for.body3.lr.ph.i45, !dbg !183, !llvm.loop !208

print_array.exit.loopexit:                        ; preds = %for.inc8.i
  br label %print_array.exit, !dbg !210

print_array.exit:                                 ; preds = %print_array.exit.loopexit, %if.then
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !210, !tbaa !35
  %fputc.i = tail call i32 @fputc(i32 10, %struct._IO_FILE* %40) #8, !dbg !211
  br label %if.end, !dbg !212

if.end:                                           ; preds = %print_array.exit, %kernel_jacobi_2d_imper.exit
  tail call void @free(i8* %call6) #7, !dbg !213
  tail call void @free(i8* %call10) #7, !dbg !214
  ret i32 0, !dbg !215

polly.start:                                      ; preds = %polly.split_new_and_old
  br i1 %20, label %polly.parallel.for, label %polly.loop_header.us.preheader

polly.loop_header.us.preheader:                   ; preds = %polly.start
  br label %polly.loop_header.us

polly.loop_header.us:                             ; preds = %polly.loop_header.us.preheader, %polly.loop_header.us
  %polly.indvar.us = phi i64 [ %45, %polly.loop_header.us ], [ 0, %polly.loop_header.us.preheader ]
  %41 = shl i64 %polly.indvar.us, 3
  %42 = add i64 %41, 8
  %43 = mul i64 %42, %5
  %scevgep63.us = getelementptr i8, i8* %scevgep62, i64 %43
  %44 = bitcast i8* %scevgep63.us to i64*
  %.pre_p_scalar_66.us = load i64, i64* %44, align 8, !alias.scope !216, !noalias !218, !llvm.mem.parallel_loop_access !220
  %45 = add nuw nsw i64 %polly.indvar.us, 1
  %polly.access.mul.call10.us = mul nuw nsw i64 %45, %5
  %polly.access.add.call10.us = add nuw nsw i64 %polly.access.mul.call10.us, 1
  %polly.access.call10.us = getelementptr double, double* %4, i64 %polly.access.add.call10.us
  %46 = bitcast double* %polly.access.call10.us to i64*
  store i64 %.pre_p_scalar_66.us, i64* %46, align 8, !alias.scope !219, !noalias !221, !llvm.mem.parallel_loop_access !220
  %exitcond = icmp eq i64 %45, %19
  br i1 %exitcond, label %polly.parallel.for.loopexit, label %polly.loop_header.us, !llvm.loop !220

polly.parallel.for.loopexit:                      ; preds = %polly.loop_header.us
  br label %polly.parallel.for

polly.parallel.for:                               ; preds = %polly.parallel.for.loopexit, %polly.start
  store i64 %call.i38, i64* %polly.subfn.storeaddr.call.i38, align 8
  store i64 %indvar60, i64* %polly.subfn.storeaddr., align 8
  store i8* %call10, i8** %polly.subfn.storeaddr.call10, align 8
  store i8* %call6, i8** %polly.subfn.storeaddr.call6, align 8
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @.loc.dummy, i32 4, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, i64, i64, i8*)* @main_polly_subfn to void (i32*, i32*, ...)*), i64 0, i64 %18, i64 1, { i64, i64, i8*, i8* }* nonnull %polly.par.userContext) #7
  br label %for.body47.lr.ph.i.preheader
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare !dbg !10 dso_local void @free(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare dso_local i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #3

; Function Attrs: nofree nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5

define internal void @main_polly_subfn(i32* %polly.kmpc.global_tid, i32* %polly.kmpc.bound_tid, i64 %polly.kmpc.lb, i64 %polly.kmpc.ub, i64 %polly.kmpc.inc, i8* %polly.kmpc.shared) #6 {
polly.par.setup:
  %polly.par.LBPtr = alloca i64, align 8
  %polly.par.UBPtr = alloca i64, align 8
  %polly.par.lastIterPtr = alloca i32, align 4
  %polly.par.StridePtr = alloca i64, align 8
  %0 = bitcast i8* %polly.kmpc.shared to i64*
  %polly.subfunc.arg.call.i38 = load i64, i64* %0, align 8
  %1 = getelementptr inbounds i8, i8* %polly.kmpc.shared, i64 16
  %2 = bitcast i8* %1 to i8**
  %polly.subfunc.arg.call10 = load i8*, i8** %2, align 8
  %3 = getelementptr inbounds i8, i8* %polly.kmpc.shared, i64 24
  %4 = bitcast i8* %3 to i8**
  %polly.subfunc.arg.call6 = load i8*, i8** %4, align 8
  %polly.par.global_tid = load i32, i32* %polly.kmpc.global_tid, align 8
  store i64 %polly.kmpc.lb, i64* %polly.par.LBPtr, align 8
  store i64 %polly.kmpc.ub, i64* %polly.par.UBPtr, align 8
  store i32 0, i32* %polly.par.lastIterPtr, align 8
  store i64 %polly.kmpc.inc, i64* %polly.par.StridePtr, align 8
  %polly.indvar.UBAdjusted = add i64 %polly.kmpc.ub, -1
  call void @__kmpc_dispatch_init_8(%struct.ident_t* nonnull @.loc.dummy, i32 %polly.par.global_tid, i32 37, i64 %polly.kmpc.lb, i64 %polly.indvar.UBAdjusted, i64 %polly.kmpc.inc, i64 1)
  %5 = call i32 @__kmpc_dispatch_next_8(%struct.ident_t* nonnull @.loc.dummy, i32 %polly.par.global_tid, i32* nonnull %polly.par.lastIterPtr, i64* nonnull %polly.par.LBPtr, i64* nonnull %polly.par.UBPtr, i64* nonnull %polly.par.StridePtr)
  %polly.hasIteration = icmp eq i32 %5, 1
  br i1 %polly.hasIteration, label %polly.par.loadIVBounds.preheader, label %polly.par.exit

polly.par.loadIVBounds.preheader:                 ; preds = %polly.par.setup
  br label %polly.par.loadIVBounds

polly.par.exit.loopexit:                          ; preds = %polly.loop_exit
  br label %polly.par.exit

polly.par.exit:                                   ; preds = %polly.par.exit.loopexit, %polly.par.setup
  ret void

polly.par.loadIVBounds:                           ; preds = %polly.par.loadIVBounds.preheader, %polly.loop_exit
  %polly.indvar.UB = load i64, i64* %polly.par.UBPtr, align 8
  %polly.indvar.LB = load i64, i64* %polly.par.LBPtr, align 8
  %6 = and i64 %polly.subfunc.arg.call.i38, 4294967295
  %scevgep22 = getelementptr i8, i8* %polly.subfunc.arg.call6, i64 16
  %scevgep26 = getelementptr i8, i8* %polly.subfunc.arg.call6, i64 8
  %scevgep30 = getelementptr i8, i8* %polly.subfunc.arg.call6, i64 8
  %7 = shl nuw nsw i64 %6, 3
  %scevgep34 = getelementptr i8, i8* %polly.subfunc.arg.call10, i64 8
  br label %polly.loop_header

polly.loop_exit:                                  ; preds = %polly.loop_exit3
  %8 = call i32 @__kmpc_dispatch_next_8(%struct.ident_t* nonnull @.loc.dummy, i32 %polly.par.global_tid, i32* nonnull %polly.par.lastIterPtr, i64* nonnull %polly.par.LBPtr, i64* nonnull %polly.par.UBPtr, i64* nonnull %polly.par.StridePtr)
  %polly.hasWork = icmp eq i32 %8, 1
  br i1 %polly.hasWork, label %polly.par.loadIVBounds, label %polly.par.exit.loopexit

polly.loop_header:                                ; preds = %polly.loop_exit3, %polly.par.loadIVBounds
  %polly.indvar = phi i64 [ %polly.indvar.LB, %polly.par.loadIVBounds ], [ %polly.indvar_next, %polly.loop_exit3 ]
  %9 = add nsw i64 %polly.subfunc.arg.call.i38, -3
  %pexp.p_div_q = lshr i64 %9, 5
  br label %polly.loop_header1

polly.loop_exit3:                                 ; preds = %polly.loop_exit9
  %polly.indvar_next = add nsw i64 %polly.indvar, %polly.kmpc.inc
  %polly.loop_cond = icmp sgt i64 %polly.indvar_next, %polly.indvar.UB
  br i1 %polly.loop_cond, label %polly.loop_exit, label %polly.loop_header

polly.loop_header1:                               ; preds = %polly.loop_exit9, %polly.loop_header
  %polly.indvar4 = phi i64 [ 0, %polly.loop_header ], [ %polly.indvar_next5, %polly.loop_exit9 ]
  %10 = shl nsw i64 %polly.indvar, 5
  %11 = sub nsw i64 %polly.subfunc.arg.call.i38, %10
  %12 = icmp slt i64 %11, 34
  %13 = select i1 %12, i64 %11, i64 34
  %14 = add nsw i64 %13, -3
  %polly.loop_guard = icmp sgt i64 %13, 2
  br i1 %polly.loop_guard, label %polly.loop_header7.preheader, label %polly.loop_exit9

polly.loop_header7.preheader:                     ; preds = %polly.loop_header1
  br label %polly.loop_header7

polly.loop_exit9.loopexit:                        ; preds = %polly.loop_exit16
  br label %polly.loop_exit9

polly.loop_exit9:                                 ; preds = %polly.loop_exit9.loopexit, %polly.loop_header1
  %polly.indvar_next5 = add nuw nsw i64 %polly.indvar4, 1
  %polly.loop_cond6 = icmp ult i64 %polly.indvar4, %pexp.p_div_q
  br i1 %polly.loop_cond6, label %polly.loop_header1, label %polly.loop_exit3

polly.loop_header7:                               ; preds = %polly.loop_header7.preheader, %polly.loop_exit16
  %polly.indvar10 = phi i64 [ %polly.indvar_next11, %polly.loop_exit16 ], [ 0, %polly.loop_header7.preheader ]
  %15 = shl nsw i64 %polly.indvar4, 5
  %16 = sub nsw i64 %polly.subfunc.arg.call.i38, %15
  %17 = icmp slt i64 %16, 34
  %18 = select i1 %17, i64 %16, i64 34
  %19 = add nsw i64 %18, -3
  %polly.loop_guard17 = icmp sgt i64 %18, 2
  br i1 %polly.loop_guard17, label %polly.loop_header14.preheader, label %polly.loop_exit16

polly.loop_header14.preheader:                    ; preds = %polly.loop_header7
  br label %polly.loop_header14

polly.loop_exit16.loopexit:                       ; preds = %polly.stmt.for.body7.i.cont
  br label %polly.loop_exit16

polly.loop_exit16:                                ; preds = %polly.loop_exit16.loopexit, %polly.loop_header7
  %polly.indvar_next11 = add nuw nsw i64 %polly.indvar10, 1
  %polly.loop_cond12 = icmp slt i64 %polly.indvar10, %14
  br i1 %polly.loop_cond12, label %polly.loop_header7, label %polly.loop_exit9.loopexit

polly.loop_header14:                              ; preds = %polly.loop_header14.preheader, %polly.stmt.for.body7.i.cont
  %polly.indvar18 = phi i64 [ %polly.indvar_next19, %polly.stmt.for.body7.i.cont ], [ 0, %polly.loop_header14.preheader ]
  %20 = shl nsw i64 %polly.indvar, 5
  %21 = add nsw i64 %20, %polly.indvar10
  %22 = shl nsw i64 %polly.indvar4, 5
  %23 = add nuw nsw i64 %22, %polly.indvar18
  %polly.access.cast.polly.subfunc.arg.call10 = bitcast i8* %polly.subfunc.arg.call10 to double*
  %24 = shl nsw i64 %polly.indvar, 5
  %25 = add nsw i64 %24, %polly.indvar10
  %26 = add nsw i64 %25, 1
  %polly.access.mul.polly.subfunc.arg.call10 = mul nsw i64 %26, %6
  %27 = shl nsw i64 %polly.indvar4, 5
  %28 = add nuw nsw i64 %27, %polly.indvar18
  %29 = add nuw nsw i64 %28, 1
  %polly.access.add.polly.subfunc.arg.call10 = add nsw i64 %polly.access.mul.polly.subfunc.arg.call10, %29
  %polly.access.polly.subfunc.arg.call10 = getelementptr double, double* %polly.access.cast.polly.subfunc.arg.call10, i64 %polly.access.add.polly.subfunc.arg.call10
  %polly.access.polly.subfunc.arg.call10.reload = load double, double* %polly.access.polly.subfunc.arg.call10, align 8, !alias.scope !219, !noalias !221
  %30 = shl i64 %21, 3
  %31 = add i64 %30, 8
  %32 = mul i64 %6, %31
  %33 = shl i64 %23, 3
  %34 = add i64 %32, %33
  %scevgep = getelementptr i8, i8* %polly.subfunc.arg.call6, i64 %34
  %scevgep21 = bitcast i8* %scevgep to double*
  %_p_scalar_ = load double, double* %scevgep21, align 8, !alias.scope !216, !noalias !218
  %p_add.i54 = fadd double %polly.access.polly.subfunc.arg.call10.reload, %_p_scalar_, !dbg !139
  %35 = shl i64 %21, 3
  %36 = add i64 %35, 8
  %37 = mul i64 %6, %36
  %38 = shl i64 %23, 3
  %39 = add i64 %37, %38
  %scevgep23 = getelementptr i8, i8* %scevgep22, i64 %39
  %scevgep2324 = bitcast i8* %scevgep23 to double*
  %_p_scalar_25 = load double, double* %scevgep2324, align 8, !alias.scope !216, !noalias !218
  %p_add20.i = fadd double %p_add.i54, %_p_scalar_25, !dbg !142
  %40 = shl i64 %21, 3
  %41 = add i64 %40, 16
  %42 = mul i64 %6, %41
  %43 = shl i64 %23, 3
  %44 = add i64 %42, %43
  %scevgep27 = getelementptr i8, i8* %scevgep26, i64 %44
  %scevgep2728 = bitcast i8* %scevgep27 to double*
  %_p_scalar_29 = load double, double* %scevgep2728, align 8, !alias.scope !216, !noalias !218
  %p_add26.i = fadd double %p_add20.i, %_p_scalar_29, !dbg !144
  %45 = mul i64 %7, %21
  %46 = shl i64 %23, 3
  %47 = add i64 %45, %46
  %scevgep31 = getelementptr i8, i8* %scevgep30, i64 %47
  %scevgep3132 = bitcast i8* %scevgep31 to double*
  %_p_scalar_33 = load double, double* %scevgep3132, align 8, !alias.scope !216, !noalias !218
  %p_add32.i = fadd double %p_add26.i, %_p_scalar_33, !dbg !146
  %p_mul.i57 = fmul double %p_add32.i, 2.000000e-01, !dbg !147
  %48 = shl i64 %21, 3
  %49 = add i64 %48, 8
  %50 = mul i64 %6, %49
  %51 = shl i64 %23, 3
  %52 = add i64 %50, %51
  %scevgep35 = getelementptr i8, i8* %scevgep34, i64 %52
  %scevgep3536 = bitcast i8* %scevgep35 to double*
  store double %p_mul.i57, double* %scevgep3536, align 8, !alias.scope !219, !noalias !221
  %53 = icmp slt i64 %polly.subfunc.arg.call.i38, 2147483648
  %54 = shl nsw i64 %polly.indvar4, 5
  %55 = add nuw nsw i64 %54, %polly.indvar18
  %56 = add nuw nsw i64 %55, 4
  %57 = icmp sge i64 %polly.subfunc.arg.call.i38, %56
  %58 = and i1 %53, %57
  br i1 %58, label %polly.stmt.for.body7.i.Stmt1_Write0.partial, label %polly.stmt.for.body7.i.cont

polly.stmt.for.body7.i.Stmt1_Write0.partial:      ; preds = %polly.loop_header14
  %polly.access.cast.polly.subfunc.arg.call1037 = bitcast i8* %polly.subfunc.arg.call10 to double*
  %59 = shl nsw i64 %polly.indvar, 5
  %60 = add nsw i64 %59, %polly.indvar10
  %61 = add nsw i64 %60, 1
  %polly.access.mul.polly.subfunc.arg.call1038 = mul nsw i64 %61, %6
  %62 = shl nsw i64 %polly.indvar4, 5
  %63 = add nuw nsw i64 %62, %polly.indvar18
  %64 = add nuw nsw i64 %63, 2
  %polly.access.add.polly.subfunc.arg.call1039 = add nsw i64 %polly.access.mul.polly.subfunc.arg.call1038, %64
  %polly.access.polly.subfunc.arg.call1040 = getelementptr double, double* %polly.access.cast.polly.subfunc.arg.call1037, i64 %polly.access.add.polly.subfunc.arg.call1039
  store double %_p_scalar_25, double* %polly.access.polly.subfunc.arg.call1040, align 8, !alias.scope !219, !noalias !221
  br label %polly.stmt.for.body7.i.cont

polly.stmt.for.body7.i.cont:                      ; preds = %polly.loop_header14, %polly.stmt.for.body7.i.Stmt1_Write0.partial
  %polly.indvar_next19 = add nuw nsw i64 %polly.indvar18, 1
  %polly.loop_cond20 = icmp slt i64 %polly.indvar18, %19
  br i1 %polly.loop_cond20, label %polly.loop_header14, label %polly.loop_exit16.loopexit
}

declare void @__kmpc_dispatch_init_8(%struct.ident_t*, i32, i32, i64, i64, i64, i64)

declare i32 @__kmpc_dispatch_next_8(%struct.ident_t*, i32, i32*, i64*, i64*, i64*)

declare void @__kmpc_fork_call(%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...)

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "polly-optimized" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { nofree nounwind }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { "polly.skip.fn" }
attributes #7 = { nounwind }
attributes #8 = { cold nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!18, !19, !20}
!llvm.ident = !{!21}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 (git@github.com:SusanTan/llvm-project.git fcc6352b59353e5ddb5bfbd85a3919893d4595c9)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "jacobi-2d-imper.c", directory: "/scratch/yc0769/xstack-benchmark/xstack-benchmark/polybench-3.1/jacobi-2d-imper")
!2 = !{}
!3 = !{!4, !9, !10, !14, !15, !6}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, elements: !7)
!6 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!7 = !{!8, !8}
!8 = !DISubrange(count: -1)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!10 = !DISubprogram(name: "free", scope: !11, file: !11, line: 565, type: !12, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !2)
!11 = !DIFile(filename: "/usr/include/stdlib.h", directory: "")
!12 = !DISubroutineType(types: !13)
!13 = !{null, !9}
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!18 = !{i32 7, !"Dwarf Version", i32 4}
!19 = !{i32 2, !"Debug Info Version", i32 3}
!20 = !{i32 1, !"wchar_size", i32 4}
!21 = !{!"clang version 10.0.1 (git@github.com:SusanTan/llvm-project.git fcc6352b59353e5ddb5bfbd85a3919893d4595c9)"}
!22 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 73, type: !23, scopeLine: 74, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !25)
!23 = !DISubroutineType(types: !24)
!24 = !{!14, !14, !15}
!25 = !{!26, !27, !28, !29, !30, !31, !32}
!26 = !DILocalVariable(name: "argc", arg: 1, scope: !22, file: !1, line: 73, type: !14)
!27 = !DILocalVariable(name: "argv", arg: 2, scope: !22, file: !1, line: 73, type: !15)
!28 = !DILocalVariable(name: "dump_code", scope: !22, file: !1, line: 76, type: !14)
!29 = !DILocalVariable(name: "n", scope: !22, file: !1, line: 77, type: !14)
!30 = !DILocalVariable(name: "tsteps", scope: !22, file: !1, line: 78, type: !14)
!31 = !DILocalVariable(name: "A", scope: !22, file: !1, line: 81, type: !4)
!32 = !DILocalVariable(name: "B", scope: !22, file: !1, line: 82, type: !4)
!33 = !DILocation(line: 0, scope: !22)
!34 = !DILocation(line: 76, column: 24, scope: !22)
!35 = !{!36, !36, i64 0}
!36 = !{!"any pointer", !37, i64 0}
!37 = !{!"omnipotent char", !38, i64 0}
!38 = !{!"Simple C/C++ TBAA"}
!39 = !DILocalVariable(name: "__nptr", arg: 1, scope: !40, file: !11, line: 361, type: !43)
!40 = distinct !DISubprogram(name: "atoi", scope: !11, file: !11, line: 361, type: !41, scopeLine: 362, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !45)
!41 = !DISubroutineType(types: !42)
!42 = !{!14, !43}
!43 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !44, size: 64)
!44 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !17)
!45 = !{!39}
!46 = !DILocation(line: 0, scope: !40, inlinedAt: !47)
!47 = distinct !DILocation(line: 76, column: 19, scope: !22)
!48 = !DILocation(line: 363, column: 16, scope: !40, inlinedAt: !47)
!49 = !DILocation(line: 363, column: 10, scope: !40, inlinedAt: !47)
!50 = !DILocation(line: 77, column: 16, scope: !22)
!51 = !DILocation(line: 0, scope: !40, inlinedAt: !52)
!52 = distinct !DILocation(line: 77, column: 11, scope: !22)
!53 = !DILocation(line: 363, column: 16, scope: !40, inlinedAt: !52)
!54 = !DILocation(line: 363, column: 10, scope: !40, inlinedAt: !52)
!55 = !DILocation(line: 78, column: 21, scope: !22)
!56 = !DILocation(line: 0, scope: !40, inlinedAt: !57)
!57 = distinct !DILocation(line: 78, column: 16, scope: !22)
!58 = !DILocation(line: 363, column: 16, scope: !40, inlinedAt: !57)
!59 = !DILocation(line: 363, column: 10, scope: !40, inlinedAt: !57)
!60 = !DILocation(line: 81, column: 54, scope: !22)
!61 = !DILocation(line: 81, column: 60, scope: !22)
!62 = !DILocation(line: 81, column: 43, scope: !22)
!63 = !DILocation(line: 81, column: 26, scope: !22)
!64 = !DILocation(line: 82, column: 43, scope: !22)
!65 = !DILocation(line: 82, column: 26, scope: !22)
!66 = !DILocalVariable(name: "n", arg: 1, scope: !67, file: !1, line: 15, type: !14)
!67 = distinct !DISubprogram(name: "init_array", scope: !1, file: !1, line: 15, type: !68, scopeLine: 18, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !73)
!68 = !DISubroutineType(types: !69)
!69 = !{null, !14, !70, !70}
!70 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !71, size: 64)
!71 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, elements: !72)
!72 = !{!8}
!73 = !{!66, !74, !75, !76, !77}
!74 = !DILocalVariable(name: "A", arg: 2, scope: !67, file: !1, line: 16, type: !70)
!75 = !DILocalVariable(name: "B", arg: 3, scope: !67, file: !1, line: 17, type: !70)
!76 = !DILocalVariable(name: "i", scope: !67, file: !1, line: 19, type: !14)
!77 = !DILocalVariable(name: "j", scope: !67, file: !1, line: 19, type: !14)
!78 = !DILocation(line: 0, scope: !67, inlinedAt: !79)
!79 = distinct !DILocation(line: 86, column: 3, scope: !22)
!80 = !DILocation(line: 21, column: 17, scope: !81, inlinedAt: !79)
!81 = distinct !DILexicalBlock(scope: !82, file: !1, line: 21, column: 3)
!82 = distinct !DILexicalBlock(scope: !67, file: !1, line: 21, column: 3)
!83 = !DILocation(line: 21, column: 3, scope: !82, inlinedAt: !79)
!84 = !DILocation(line: 0, scope: !85, inlinedAt: !79)
!85 = distinct !DILexicalBlock(scope: !86, file: !1, line: 23, column: 5)
!86 = distinct !DILexicalBlock(scope: !87, file: !1, line: 22, column: 5)
!87 = distinct !DILexicalBlock(scope: !81, file: !1, line: 22, column: 5)
!88 = !DILocation(line: 22, column: 5, scope: !87, inlinedAt: !79)
!89 = !DILocation(line: 24, column: 29, scope: !85, inlinedAt: !79)
!90 = !DILocation(line: 24, column: 28, scope: !85, inlinedAt: !79)
!91 = !DILocation(line: 24, column: 35, scope: !85, inlinedAt: !79)
!92 = !DILocation(line: 24, column: 40, scope: !85, inlinedAt: !79)
!93 = !DILocation(line: 24, column: 7, scope: !85, inlinedAt: !79)
!94 = !DILocation(line: 24, column: 15, scope: !85, inlinedAt: !79)
!95 = !{!96, !96, i64 0}
!96 = !{!"double", !37, i64 0}
!97 = !DILocation(line: 25, column: 29, scope: !85, inlinedAt: !79)
!98 = !DILocation(line: 25, column: 28, scope: !85, inlinedAt: !79)
!99 = !DILocation(line: 25, column: 35, scope: !85, inlinedAt: !79)
!100 = !DILocation(line: 25, column: 40, scope: !85, inlinedAt: !79)
!101 = !DILocation(line: 25, column: 7, scope: !85, inlinedAt: !79)
!102 = !DILocation(line: 25, column: 15, scope: !85, inlinedAt: !79)
!103 = !DILocation(line: 22, column: 25, scope: !86, inlinedAt: !79)
!104 = !DILocation(line: 22, column: 19, scope: !86, inlinedAt: !79)
!105 = distinct !{!105, !88, !106}
!106 = !DILocation(line: 26, column: 5, scope: !87, inlinedAt: !79)
!107 = !DILocation(line: 21, column: 23, scope: !81, inlinedAt: !79)
!108 = distinct !{!108, !83, !109}
!109 = !DILocation(line: 26, column: 5, scope: !82, inlinedAt: !79)
!110 = !DILocation(line: 59, column: 17, scope: !111, inlinedAt: !124)
!111 = distinct !DILexicalBlock(scope: !112, file: !1, line: 59, column: 3)
!112 = distinct !DILexicalBlock(scope: !113, file: !1, line: 59, column: 3)
!113 = distinct !DISubprogram(name: "kernel_jacobi_2d_imper", scope: !1, file: !1, line: 51, type: !114, scopeLine: 55, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !116)
!114 = !DISubroutineType(types: !115)
!115 = !{null, !14, !14, !70, !70}
!116 = !{!117, !118, !119, !120, !121, !122, !123}
!117 = !DILocalVariable(name: "tsteps", arg: 1, scope: !113, file: !1, line: 51, type: !14)
!118 = !DILocalVariable(name: "n", arg: 2, scope: !113, file: !1, line: 52, type: !14)
!119 = !DILocalVariable(name: "A", arg: 3, scope: !113, file: !1, line: 53, type: !70)
!120 = !DILocalVariable(name: "B", arg: 4, scope: !113, file: !1, line: 54, type: !70)
!121 = !DILocalVariable(name: "t", scope: !113, file: !1, line: 56, type: !14)
!122 = !DILocalVariable(name: "i", scope: !113, file: !1, line: 56, type: !14)
!123 = !DILocalVariable(name: "j", scope: !113, file: !1, line: 56, type: !14)
!124 = distinct !DILocation(line: 91, column: 3, scope: !22)
!125 = !DILocation(line: 0, scope: !113, inlinedAt: !124)
!126 = !DILocation(line: 59, column: 3, scope: !112, inlinedAt: !124)
!127 = !DILocation(line: 0, scope: !128, inlinedAt: !124)
!128 = distinct !DILexicalBlock(scope: !129, file: !1, line: 61, column: 5)
!129 = distinct !DILexicalBlock(scope: !130, file: !1, line: 61, column: 5)
!130 = distinct !DILexicalBlock(scope: !111, file: !1, line: 60, column: 3)
!131 = !DILocation(line: 61, column: 5, scope: !129, inlinedAt: !124)
!132 = !DILocation(line: 0, scope: !133, inlinedAt: !124)
!133 = distinct !DILexicalBlock(scope: !134, file: !1, line: 62, column: 7)
!134 = distinct !DILexicalBlock(scope: !128, file: !1, line: 62, column: 7)
!135 = !DILocation(line: 63, column: 26, scope: !133, inlinedAt: !124)
!136 = !DILocation(line: 62, column: 7, scope: !134, inlinedAt: !124)
!137 = !DILocation(line: 63, column: 42, scope: !133, inlinedAt: !124)
!138 = !DILocation(line: 63, column: 36, scope: !133, inlinedAt: !124)
!139 = !DILocation(line: 63, column: 34, scope: !133, inlinedAt: !124)
!140 = !DILocation(line: 63, column: 54, scope: !133, inlinedAt: !124)
!141 = !DILocation(line: 63, column: 48, scope: !133, inlinedAt: !124)
!142 = !DILocation(line: 63, column: 46, scope: !133, inlinedAt: !124)
!143 = !DILocation(line: 63, column: 60, scope: !133, inlinedAt: !124)
!144 = !DILocation(line: 63, column: 58, scope: !133, inlinedAt: !124)
!145 = !DILocation(line: 63, column: 72, scope: !133, inlinedAt: !124)
!146 = !DILocation(line: 63, column: 70, scope: !133, inlinedAt: !124)
!147 = !DILocation(line: 63, column: 23, scope: !133, inlinedAt: !124)
!148 = !DILocation(line: 63, column: 9, scope: !133, inlinedAt: !124)
!149 = !DILocation(line: 63, column: 17, scope: !133, inlinedAt: !124)
!150 = !DILocation(line: 62, column: 21, scope: !133, inlinedAt: !124)
!151 = distinct !{!151, !136, !152}
!152 = !DILocation(line: 63, column: 81, scope: !134, inlinedAt: !124)
!153 = !DILocation(line: 61, column: 19, scope: !128, inlinedAt: !124)
!154 = distinct !{!154, !131, !155}
!155 = !DILocation(line: 63, column: 81, scope: !129, inlinedAt: !124)
!156 = !DILocation(line: 64, column: 5, scope: !157, inlinedAt: !124)
!157 = distinct !DILexicalBlock(scope: !130, file: !1, line: 64, column: 5)
!158 = !DILocation(line: 0, scope: !159, inlinedAt: !124)
!159 = distinct !DILexicalBlock(scope: !160, file: !1, line: 65, column: 7)
!160 = distinct !DILexicalBlock(scope: !161, file: !1, line: 65, column: 7)
!161 = distinct !DILexicalBlock(scope: !157, file: !1, line: 64, column: 5)
!162 = !DILocation(line: 66, column: 17, scope: !159, inlinedAt: !124)
!163 = !DILocation(line: 64, column: 27, scope: !161, inlinedAt: !124)
!164 = !DILocation(line: 64, column: 19, scope: !161, inlinedAt: !124)
!165 = distinct !{!165, !156, !166}
!166 = !DILocation(line: 66, column: 25, scope: !157, inlinedAt: !124)
!167 = !DILocation(line: 59, column: 28, scope: !111, inlinedAt: !124)
!168 = distinct !{!168, !126, !169}
!169 = !DILocation(line: 67, column: 3, scope: !112, inlinedAt: !124)
!170 = !DILocation(line: 97, column: 17, scope: !171)
!171 = distinct !DILexicalBlock(scope: !22, file: !1, line: 97, column: 7)
!172 = !DILocation(line: 97, column: 7, scope: !22)
!173 = !DILocalVariable(name: "n", arg: 1, scope: !174, file: !1, line: 33, type: !14)
!174 = distinct !DISubprogram(name: "print_array", scope: !1, file: !1, line: 33, type: !175, scopeLine: 36, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !177)
!175 = !DISubroutineType(types: !176)
!176 = !{null, !14, !70}
!177 = !{!173, !178, !179, !180}
!178 = !DILocalVariable(name: "A", arg: 2, scope: !174, file: !1, line: 34, type: !70)
!179 = !DILocalVariable(name: "i", scope: !174, file: !1, line: 37, type: !14)
!180 = !DILocalVariable(name: "j", scope: !174, file: !1, line: 37, type: !14)
!181 = !DILocation(line: 0, scope: !174, inlinedAt: !182)
!182 = distinct !DILocation(line: 97, column: 23, scope: !171)
!183 = !DILocation(line: 39, column: 3, scope: !184, inlinedAt: !182)
!184 = distinct !DILexicalBlock(scope: !174, file: !1, line: 39, column: 3)
!185 = !DILocation(line: 0, scope: !186, inlinedAt: !182)
!186 = distinct !DILexicalBlock(scope: !187, file: !1, line: 40, column: 29)
!187 = distinct !DILexicalBlock(scope: !188, file: !1, line: 40, column: 5)
!188 = distinct !DILexicalBlock(scope: !189, file: !1, line: 40, column: 5)
!189 = distinct !DILexicalBlock(scope: !184, file: !1, line: 39, column: 3)
!190 = !DILocation(line: 0, scope: !191, inlinedAt: !182)
!191 = distinct !DILexicalBlock(scope: !186, file: !1, line: 42, column: 11)
!192 = !DILocation(line: 40, column: 5, scope: !188, inlinedAt: !182)
!193 = !DILocation(line: 41, column: 15, scope: !186, inlinedAt: !182)
!194 = !DILocation(line: 41, column: 34, scope: !186, inlinedAt: !182)
!195 = !DILocation(line: 41, column: 7, scope: !186, inlinedAt: !182)
!196 = !DILocation(line: 42, column: 18, scope: !191, inlinedAt: !182)
!197 = !DILocation(line: 42, column: 23, scope: !191, inlinedAt: !182)
!198 = !DILocation(line: 42, column: 28, scope: !191, inlinedAt: !182)
!199 = !DILocation(line: 42, column: 11, scope: !186, inlinedAt: !182)
!200 = !DILocation(line: 42, column: 42, scope: !191, inlinedAt: !182)
!201 = !DILocation(line: 42, column: 34, scope: !191, inlinedAt: !182)
!202 = !DILocation(line: 40, column: 25, scope: !187, inlinedAt: !182)
!203 = !DILocation(line: 40, column: 19, scope: !187, inlinedAt: !182)
!204 = distinct !{!204, !192, !205}
!205 = !DILocation(line: 43, column: 5, scope: !188, inlinedAt: !182)
!206 = !DILocation(line: 39, column: 23, scope: !189, inlinedAt: !182)
!207 = !DILocation(line: 39, column: 17, scope: !189, inlinedAt: !182)
!208 = distinct !{!208, !183, !209}
!209 = !DILocation(line: 43, column: 5, scope: !184, inlinedAt: !182)
!210 = !DILocation(line: 44, column: 11, scope: !174, inlinedAt: !182)
!211 = !DILocation(line: 44, column: 3, scope: !174, inlinedAt: !182)
!212 = !DILocation(line: 97, column: 23, scope: !171)
!213 = !DILocation(line: 100, column: 3, scope: !22)
!214 = !DILocation(line: 101, column: 3, scope: !22)
!215 = !DILocation(line: 103, column: 3, scope: !22)
!216 = distinct !{!216, !217, !"polly.alias.scope.MemRef0"}
!217 = distinct !{!217, !"polly.alias.scope.domain"}
!218 = !{!219}
!219 = distinct !{!219, !217, !"polly.alias.scope.MemRef2"}
!220 = distinct !{!220}
!221 = !{!216}
